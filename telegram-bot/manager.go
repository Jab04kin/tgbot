package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func sendManagerMenu(bot *tgbotapi.BotAPI, chatID int64) {
	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–∫–µ—Ç–æ–≤
	openTickets := 0
	closedTickets := 0
	for _, ticket := range tickets {
		if ticket.Status == "open" {
			openTickets++
		} else {
			closedTickets++
		}
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ–Ω–µ–¥–∂–µ—Ä!\n\nüìä –¢–∏–∫–µ—Ç—ã: üü¢ %d –æ—Ç–∫—Ä—ã—Ç—ã—Ö | üî¥ %d –∑–∞–∫—Ä—ã—Ç—ã—Ö\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", openTickets, closedTickets))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìè –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä", "start_survey"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìö –ö–∞—Ç–∞–ª–æ–≥", "catalog"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –ö–ª–∏–µ–Ω—Ç—ã", "manager_tickets"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleManagerTicketsCallback(bot *tgbotapi.BotAPI, chatID int64) {
	if len(tickets) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üì≠ –ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç—ã –ø–æ 5 —à—Ç—É–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	showTicketsWithButtons(bot, chatID, tickets, "üé´ –í—Å–µ —Ç–∏–∫–µ—Ç—ã")
}

func handleManagerOpenTicketsCallback(bot *tgbotapi.BotAPI, chatID int64) {
	openTickets := make(map[int]*Ticket)
	for _, ticket := range tickets {
		if ticket.Status == "open" {
			openTickets[ticket.ID] = ticket
		}
	}

	if len(openTickets) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	showTicketsWithButtons(bot, chatID, openTickets, "üÜï –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã")
}

func handleManagerClosedTicketsCallback(bot *tgbotapi.BotAPI, chatID int64) {
	closedTickets := make(map[int]*Ticket)
	for _, ticket := range tickets {
		if ticket.Status == "closed" {
			closedTickets[ticket.ID] = ticket
		}
	}

	if len(closedTickets) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üì≠ –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	showTicketsWithButtons(bot, chatID, closedTickets, "üî¥ –ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã")
}

func handleManagerStatsCallback(bot *tgbotapi.BotAPI, chatID int64) {
	totalTickets := len(tickets)
	openTickets := 0
	closedTickets := 0

	for _, ticket := range tickets {
		if ticket.Status == "open" {
			openTickets++
		} else {
			closedTickets++
		}
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤:\n\n"+
		"üìà –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: %d\n"+
		"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: %d\n"+
		"üî¥ –ó–∞–∫—Ä—ã—Ç—ã—Ö: %d\n"+
		"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: %d",
		totalTickets, openTickets, closedTickets, nextTicketID-1))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleManagerHelpCallback(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "‚ùì –ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n\n"+
		"üîò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n"+
		"‚Ä¢ –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ç—ã\n"+
		"‚Ä¢ –ù–æ–≤—ã–µ —Ç–∏–∫–µ—Ç—ã - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö\n"+
		"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"+
		"‚Ä¢ –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"+
		"üí° –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func isManagerResponse(message *tgbotapi.Message) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è MANAGER_ID
	managerIDStr := os.Getenv("MANAGER_ID")

	// –ï—Å–ª–∏ MANAGER_ID == "0" –∏–ª–∏ –ø—É—Å—Ç–æ–π, —Ç–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ä–µ–∂–∏–º - –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
	if managerIDStr == "0" || managerIDStr == "" {
		return false
	}

	// –ï—Å–ª–∏ MANAGER_ID —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π ID, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–µ–º—É
	if managerID, err := strconv.ParseInt(managerIDStr, 10, 64); err == nil && message.From.ID == managerID {
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ MANAGER_ID –Ω–µ 0
	if message.From.UserName == "Shpinatyamba" {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
		if managerID == 0 {
			managerID = message.From.ID
			log.Printf("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞: %d (@%s)", managerID, message.From.UserName)
		}
		return true
	}

	return false
}

func handleManagerResponse(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	text := message.Text

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
	if ticketID, exists := userTickets[message.Chat.ID]; exists {
		handleManagerReplyToTicket(bot, message, ticketID)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
	switch {
	case strings.HasPrefix(text, "–û—Ç–≤–µ—Ç:"):
		handleOldReplyFormat(bot, message)
	default:
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
		sendManagerMenu(bot, message.Chat.ID)
	}
}

func handleOldReplyFormat(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	// –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	parts := strings.SplitN(message.Text, " ", 3)
	if len(parts) >= 3 {
		userID, err := strconv.ParseInt(parts[1], 10, 64)
		if err != nil {
			msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –û—Ç–≤–µ—Ç: [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [—Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞]")
			bot.Send(msg)
			return
		}

		answerText := parts[2]
		responseMsg := tgbotapi.NewMessage(userID, fmt.Sprintf("üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n%s", answerText))
		bot.Send(responseMsg)

		confirmMsg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userID))
		bot.Send(confirmMsg)

		log.Printf("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s", userID, answerText)
	} else {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –û—Ç–≤–µ—Ç: [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [—Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞]")
		bot.Send(msg)
	}
}
