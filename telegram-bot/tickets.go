package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–∫–µ—Ç–∞–º–∏
var tickets = make(map[int]*Ticket)   // –≤—Å–µ —Ç–∏–∫–µ—Ç—ã
var userTickets = make(map[int64]int) // —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> ID —Ç–∏–∫–µ—Ç–∞
var nextTicketID = 1

type Message struct {
	ID            int       `json:"id"`
	SenderID      int64     `json:"sender_id"`
	Text          string    `json:"text"`
	Time          time.Time `json:"time"`
	IsFromManager bool      `json:"is_from_manager"`
}

type Ticket struct {
	ID              int       `json:"id"`
	UserID          int64     `json:"user_id"`
	Username        string    `json:"username"`
	FirstName       string    `json:"first_name"`
	LastName        string    `json:"last_name"`
	Height          int       `json:"height"`
	ChestSize       int       `json:"chest_size"`
	Oversize        bool      `json:"oversize"`
	RecommendedSize string    `json:"recommended_size"`
	Question        string    `json:"question"`
	Status          string    `json:"status"` // "open", "closed"
	CreatedAt       time.Time `json:"created_at"`
	LastMessage     time.Time `json:"last_message"`
	Messages        []Message `json:"messages"`
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º —Ç–∏–∫–µ—Ç–æ–≤
func saveTickets() {
	data, err := json.MarshalIndent(tickets, "", "  ")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤: %v", err)
		return
	}

	err = os.WriteFile("tickets.json", data, 0644)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤: %v", err)
	} else {
		log.Printf("–¢–∏–∫–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")
	}
}

func loadTickets() {
	data, err := os.ReadFile("tickets.json")
	if err != nil {
		log.Printf("–§–∞–π–ª —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
	dataStr := strings.TrimSpace(string(data))
	if dataStr == "" || dataStr == "[]" {
		log.Printf("–§–∞–π–ª —Ç–∏–∫–µ—Ç–æ–≤ –ø—É—Å—Ç–æ–π, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")
		return
	}

	err = json.Unmarshal(data, &tickets)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤: %v", err)
		return
	}

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º nextTicketID
	maxID := 0
	for id := range tickets {
		if id > maxID {
			maxID = id
		}
	}
	nextTicketID = maxID + 1

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userTickets
	for id, ticket := range tickets {
		userTickets[ticket.UserID] = id
	}

	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Ç–∏–∫–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞", len(tickets))
}

func createTicketAndAskQuestion(bot *tgbotapi.BotAPI, chatID int64, recommendedSize string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
	state, exists := userStates[chatID]

	// –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –±–µ–∑ –Ω–∏—Ö
	var ticket *Ticket
	now := time.Now()

	if exists {
		// –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
		ticket = &Ticket{
			ID:        nextTicketID,
			UserID:    chatID,
			Username:  "", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
			FirstName: "", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
			LastName:  "", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
			Height:    state.Height,
			ChestSize: state.ChestSize,
			Oversize:  state.Oversize,
			RecommendedSize: func() string {
				if recommendedSize != "" {
					return recommendedSize
				}
				mark, _ := getSizeInfo(state.ChestSize, state.Oversize)
				return mark
			}(),
			Question:    "",
			Status:      "open",
			CreatedAt:   now,
			LastMessage: now,
			Messages:    []Message{},
		}
	} else {
		// –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ - —Å–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –±–µ–∑ –Ω–∏—Ö
		ticket = &Ticket{
			ID:              nextTicketID,
			UserID:          chatID,
			Username:        "", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
			FirstName:       "", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
			LastName:        "", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
			Height:          0,
			ChestSize:       0,
			Oversize:        false,
			RecommendedSize: recommendedSize,
			Question:        "",
			Status:          "open",
			CreatedAt:       now,
			LastMessage:     now,
			Messages:        []Message{},
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç
	tickets[nextTicketID] = ticket
	userTickets[chatID] = nextTicketID
	nextTicketID++

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç—ã –≤ —Ñ–∞–π–ª
	saveTickets()

	// –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å
	msg := tgbotapi.NewMessage(chatID, "‚úÖ –°–æ–∑–¥–∞–Ω –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!\n\n–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å? –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)

	// –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
	questionStates[chatID] = true
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Ç–∏–∫–µ—Ç–∞—Ö

// addMessageToTicket –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç
func addMessageToTicket(ticketID int, senderID int64, text string, isFromManager bool) {
	ticket, exists := tickets[ticketID]
	if !exists {
		log.Printf("–¢–∏–∫–µ—Ç #%d –Ω–µ –Ω–∞–π–¥–µ–Ω", ticketID)
		return
	}

	messageID := len(ticket.Messages) + 1
	message := Message{
		ID:            messageID,
		SenderID:      senderID,
		Text:          text,
		Time:          time.Now(),
		IsFromManager: isFromManager,
	}

	ticket.Messages = append(ticket.Messages, message)
	ticket.LastMessage = time.Now()

	saveTickets()
	log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∏–∫–µ—Ç #%d", ticketID)
}

// updateTicketUserInfo –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ç–∏–∫–µ—Ç–µ
func updateTicketUserInfo(ticketID int, username, firstName, lastName string) {
	ticket, exists := tickets[ticketID]
	if !exists {
		log.Printf("–¢–∏–∫–µ—Ç #%d –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", ticketID)
		return
	}

	ticket.Username = username
	ticket.FirstName = firstName
	ticket.LastName = lastName

	saveTickets()
	log.Printf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ç–∏–∫–µ—Ç–µ #%d", ticketID)
}

// getTicketMessages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
func getTicketMessages(ticketID int) string {
	ticket, exists := tickets[ticketID]
	if !exists {
		return "–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
	}

	if len(ticket.Messages) == 0 {
		return "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
	}

	var result strings.Builder
	result.WriteString(fmt.Sprintf("üìã –î–∏–∞–ª–æ–≥ —Ç–∏–∫–µ—Ç–∞ #%d:\n\n", ticketID))

	for _, msg := range ticket.Messages {
		senderType := "üë§ –ö–ª–∏–µ–Ω—Ç"
		if msg.IsFromManager {
			senderType = "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä"
		}

		result.WriteString(fmt.Sprintf("%s (%s):\n%s\n\n",
			senderType,
			msg.Time.Format("02.01.2006 15:04:05"),
			msg.Text))
	}

	return result.String()
}

func sendClientCardToManager(bot *tgbotapi.BotAPI, ticket *Ticket) {
	oversizeText := "–ù–µ—Ç"
	if ticket.Oversize {
		oversizeText = "–î–∞"
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
	var messageText string
	if ticket.Height > 0 && ticket.ChestSize > 0 {
		// –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
		messageText = fmt.Sprintf("üé´ –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #%d\n\n"+
			"üë§ –ö–ª–∏–µ–Ω—Ç: %s %s (@%s)\n"+
			"üÜî ID: %d\n"+
			"üìè –†–æ—Å—Ç: %d —Å–º\n"+
			"üìê –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: %d —Å–º\n"+
			"üëï –û–≤–µ—Ä—Å–∞–π–∑: %s\n"+
			"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: %s\n"+
			"üïê –°–æ–∑–¥–∞–Ω: %s\n\n"+
			"üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–º",
			ticket.ID,
			ticket.FirstName,
			ticket.LastName,
			ticket.Username,
			ticket.UserID,
			ticket.Height,
			ticket.ChestSize,
			oversizeText,
			ticket.RecommendedSize,
			ticket.CreatedAt.Format("15:04 02.01.2006"))
	} else {
		// –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
		messageText = fmt.Sprintf("üé´ –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #%d\n\n"+
			"üë§ –ö–ª–∏–µ–Ω—Ç: %s %s (@%s)\n"+
			"üÜî ID: %d\n"+
			"üìè –†–æ—Å—Ç: –ù–µ —É–∫–∞–∑–∞–Ω\n"+
			"üìê –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: –ù–µ —É–∫–∞–∑–∞–Ω\n"+
			"üëï –û–≤–µ—Ä—Å–∞–π–∑: –ù–µ —É–∫–∞–∑–∞–Ω\n"+
			"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: %s\n"+
			"üïê –°–æ–∑–¥–∞–Ω: %s\n\n"+
			"üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–º",
			ticket.ID,
			ticket.FirstName,
			ticket.LastName,
			ticket.Username,
			ticket.UserID,
			ticket.RecommendedSize,
			ticket.CreatedAt.Format("15:04 02.01.2006"))
	}

	// –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
	ids := getManagerIDs()
	if len(ids) == 0 {
		log.Printf("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
		return
	}
	for _, mid := range ids {
		msg := tgbotapi.NewMessage(mid, messageText)
		bot.Send(msg)
	}

	log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #%d –º–µ–Ω–µ–¥–∂–µ—Ä—É", ticket.ID)
}

func handleManagerQuestion(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	question := message.Text

	// –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	ticketID, exists := userTickets[chatID]
	if !exists {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
		bot.Send(msg)
		delete(questionStates, chatID)
		return
	}

	ticket, found := tickets[ticketID]
	if !found || ticket.Status != "open" {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
		bot.Send(msg)
		delete(questionStates, chatID)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∏–∫–µ—Ç–µ
	updateTicketUserInfo(ticketID, message.From.UserName, message.From.FirstName, message.From.LastName)

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–∏–∫–µ—Ç
	addMessageToTicket(ticketID, chatID, question, false)

	// –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
	if t, ok := tickets[ticketID]; ok {
		if len(t.Messages) == 1 { // —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ ‚Äî —ç—Ç–æ –ø–µ—Ä–≤–æ–µ
			sendClientCardToManager(bot, t)
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
	messageText := fmt.Sprintf("üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–∏–∫–µ—Ç #%d):\n\n%s", ticketID, question)

	// –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
	ids := getManagerIDs()
	if len(ids) == 0 {
		log.Printf("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
		return
	}
	for _, mid := range ids {
		msg := tgbotapi.NewMessage(mid, messageText)
		bot.Send(msg)
	}

	log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –≤ —Ç–∏–∫–µ—Ç #%d", chatID, ticketID)
}

// showManagerTicketDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Ç–∏–∫–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
func showManagerTicketDialog(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	ticket, exists := tickets[ticketID]
	if !exists {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	if len(ticket.Messages) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üìã –î–∏–∞–ª–æ–≥ –ø—É—Å—Ç")
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥
	dialogText := getTicketMessages(ticketID)

	// –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
	const maxMessageLength = 4000
	if len(dialogText) > maxMessageLength {
		parts := splitMessageForManager(dialogText, maxMessageLength)
		for i, part := range parts {
			msg := tgbotapi.NewMessage(chatID, part)
			if i == len(parts)-1 {
				// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
				keyboard := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üîô –ö —Ç–∏–∫–µ—Ç—É", fmt.Sprintf("ticket_view_%d", ticketID)),
					),
				)
				msg.ReplyMarkup = keyboard
			}
			bot.Send(msg)
		}
	} else {
		msg := tgbotapi.NewMessage(chatID, dialogText)
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ö —Ç–∏–∫–µ—Ç—É", fmt.Sprintf("ticket_view_%d", ticketID)),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	}
}

// splitMessageForManager —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
func splitMessageForManager(text string, maxLength int) []string {
	var parts []string
	runes := []rune(text)

	for len(runes) > 0 {
		if len(runes) <= maxLength {
			parts = append(parts, string(runes))
			break
		}

		cutIndex := maxLength
		for cutIndex > maxLength/2 && runes[cutIndex] != '\n' {
			cutIndex--
		}

		if cutIndex <= maxLength/2 {
			cutIndex = maxLength
		}

		parts = append(parts, string(runes[:cutIndex]))
		runes = runes[cutIndex:]
	}

	return parts
}

func showTicketDetails(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	ticket, exists := tickets[ticketID]
	if !exists {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	oversizeText := "–ù–µ—Ç"
	if ticket.Oversize {
		oversizeText = "–î–∞"
	}

	status := "üü¢ –û—Ç–∫—Ä—ã—Ç"
	if ticket.Status == "closed" {
		status = "üî¥ –ó–∞–∫—Ä—ã—Ç"
	}

	var text string
	if ticket.Height > 0 && ticket.ChestSize > 0 {
		// –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
		text = fmt.Sprintf("üé´ –¢–∏–∫–µ—Ç #%d %s\n\n"+
			"üë§ –ö–ª–∏–µ–Ω—Ç: %s %s (@%s)\n"+
			"üÜî ID: %d\n"+
			"üìè –†–æ—Å—Ç: %d —Å–º\n"+
			"üìê –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: %d —Å–º\n"+
			"üëï –û–≤–µ—Ä—Å–∞–π–∑: %s\n"+
			"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: %s\n"+
			"üïê –°–æ–∑–¥–∞–Ω: %s\n",
			ticket.ID, status,
			ticket.FirstName, ticket.LastName, ticket.Username,
			ticket.UserID,
			ticket.Height,
			ticket.ChestSize,
			oversizeText,
			ticket.RecommendedSize,
			ticket.CreatedAt.Format("15:04 02.01.2006"))
	} else {
		// –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
		text = fmt.Sprintf("üé´ –¢–∏–∫–µ—Ç #%d %s\n\n"+
			"üë§ –ö–ª–∏–µ–Ω—Ç: %s %s (@%s)\n"+
			"üÜî ID: %d\n"+
			"üìè –†–æ—Å—Ç: –ù–µ —É–∫–∞–∑–∞–Ω\n"+
			"üìê –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: –ù–µ —É–∫–∞–∑–∞–Ω\n"+
			"üëï –û–≤–µ—Ä—Å–∞–π–∑: –ù–µ —É–∫–∞–∑–∞–Ω\n"+
			"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: %s\n"+
			"üïê –°–æ–∑–¥–∞–Ω: %s\n",
			ticket.ID, status,
			ticket.FirstName, ticket.LastName, ticket.Username,
			ticket.UserID,
			ticket.RecommendedSize,
			ticket.CreatedAt.Format("15:04 02.01.2006"))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if len(ticket.Messages) > 0 {
		text += "\nüí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
		lastMessages := getLastMessages(ticketID, 5)
		for _, msg := range lastMessages {
			senderType := "üë§ –ö–ª–∏–µ–Ω—Ç"
			if msg.IsFromManager {
				senderType = "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä"
			}
			text += fmt.Sprintf("%s (%s):\n%s\n\n",
				senderType,
				msg.Time.Format("02.01 15:04"),
				msg.Text)
		}
	} else {
		text += "\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
	}

	msg := tgbotapi.NewMessage(chatID, text)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∞–ª–æ–≥–∞
	if len(ticket.Messages) > 0 {
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("üìã –î–∏–∞–ª–æ–≥ (%d —Å–æ–æ–±—â–µ–Ω–∏–π)", len(ticket.Messages)), fmt.Sprintf("ticket_dialog_%d", ticketID)),
		})
	}

	if ticket.Status == "open" {
		// –î–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", fmt.Sprintf("ticket_reply_%d", ticketID)),
			tgbotapi.NewInlineKeyboardButtonData("üîí –ó–∞–∫—Ä—ã—Ç—å", fmt.Sprintf("ticket_close_%d", ticketID)),
		})
	} else {
		// –î–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: –æ—Ç–∫—Ä—ã—Ç—å
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üîì –û—Ç–∫—Ä—ã—Ç—å", fmt.Sprintf("ticket_open_%d", ticketID)),
		})
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "manager_tickets"),
	})

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	bot.Send(msg)
}

func startTicketReply(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
	userTickets[chatID] = ticketID

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üí¨ –û—Ç–≤–µ—Ç –≤ —Ç–∏–∫–µ—Ç #%d\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:", ticketID))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", fmt.Sprintf("ticket_view_%d", ticketID)),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func closeTicketFromButton(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	ticket, exists := tickets[ticketID]
	if !exists {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	if ticket.Status == "closed" {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
		bot.Send(msg)
		return
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
	ticket.Status = "closed"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
	saveTickets()

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	closeMsg := tgbotapi.NewMessage(ticket.UserID, "üîí –î–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")
	bot.Send(closeMsg)

	// –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
	delete(questionStates, ticket.UserID)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
	confirmMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –¢–∏–∫–µ—Ç #%d –∑–∞–∫—Ä—ã—Ç", ticketID))
	bot.Send(confirmMsg)

	log.Printf("–¢–∏–∫–µ—Ç #%d –∑–∞–∫—Ä—ã—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É", ticketID)
}

func openTicketFromButton(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	ticket, exists := tickets[ticketID]
	if !exists {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	if ticket.Status == "open" {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç")
		bot.Send(msg)
		return
	}

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
	ticket.Status = "open"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
	saveTickets()

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	openMsg := tgbotapi.NewMessage(ticket.UserID, "üîì –î–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
	bot.Send(openMsg)

	// –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
	questionStates[ticket.UserID] = true

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
	confirmMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –¢–∏–∫–µ—Ç #%d –æ—Ç–∫—Ä—ã—Ç", ticketID))
	bot.Send(confirmMsg)

	log.Printf("–¢–∏–∫–µ—Ç #%d –æ—Ç–∫—Ä—ã—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É", ticketID)
}

// showTicketsWithButtons ‚Äî legacy (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ showTicketsWithFilters). –£–¥–∞–ª–µ–Ω–æ.

func handleTicketButtonCallback(bot *tgbotapi.BotAPI, chatID int64, callbackData string) {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
	if strings.HasPrefix(callbackData, "ticket_view_") {
		ticketIDStr := strings.TrimPrefix(callbackData, "ticket_view_")
		ticketID, err := strconv.Atoi(ticketIDStr)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ ID —Ç–∏–∫–µ—Ç–∞")
			bot.Send(msg)
			return
		}
		showTicketDetails(bot, chatID, ticketID)
	} else if strings.HasPrefix(callbackData, "ticket_reply_") {
		ticketIDStr := strings.TrimPrefix(callbackData, "ticket_reply_")
		ticketID, err := strconv.Atoi(ticketIDStr)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ ID —Ç–∏–∫–µ—Ç–∞")
			bot.Send(msg)
			return
		}
		startTicketReply(bot, chatID, ticketID)
	} else if strings.HasPrefix(callbackData, "ticket_close_") {
		ticketIDStr := strings.TrimPrefix(callbackData, "ticket_close_")
		ticketID, err := strconv.Atoi(ticketIDStr)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ ID —Ç–∏–∫–µ—Ç–∞")
			bot.Send(msg)
			return
		}
		closeTicketFromButton(bot, chatID, ticketID)
	} else if strings.HasPrefix(callbackData, "ticket_open_") {
		ticketIDStr := strings.TrimPrefix(callbackData, "ticket_open_")
		ticketID, err := strconv.Atoi(ticketIDStr)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ ID —Ç–∏–∫–µ—Ç–∞")
			bot.Send(msg)
			return
		}
		openTicketFromButton(bot, chatID, ticketID)
	} else if strings.HasPrefix(callbackData, "ticket_dialog_") {
		ticketIDStr := strings.TrimPrefix(callbackData, "ticket_dialog_")
		ticketID, err := strconv.Atoi(ticketIDStr)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ ID —Ç–∏–∫–µ—Ç–∞")
			bot.Send(msg)
			return
		}
		showManagerTicketDialog(bot, chatID, ticketID)
	}
}

func showContactManagerMenu(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", "contact_manager_direct"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// contactManagerDirect –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (—Å–±–æ—Ä –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ main.go)

func handleManagerReplyToTicket(bot *tgbotapi.BotAPI, message *tgbotapi.Message, ticketID int) {
	ticket, exists := tickets[ticketID]
	if !exists {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		delete(userTickets, message.Chat.ID)
		return
	}

	if ticket.Status != "open" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
		bot.Send(msg)
		delete(userTickets, message.Chat.ID)
		return
	}

	replyText := message.Text

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Ç–∏–∫–µ—Ç
	addMessageToTicket(ticketID, message.Chat.ID, replyText, true)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
	responseMsg := tgbotapi.NewMessage(ticket.UserID, fmt.Sprintf("üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n%s", replyText))
	bot.Send(responseMsg)

	// –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
	delete(userTickets, message.Chat.ID)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
	confirmMsg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–∏–∫–µ—Ç #%d", ticketID))
	bot.Send(confirmMsg)

	log.Printf("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–∏–∫–µ—Ç #%d —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: %s", ticketID, replyText)
}
