package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

type UserState struct {
	Step        int
	SelectedTee string
	Height      int
	ChestSize   int
	Oversize    bool
}

type Ticket struct {
	ID              int
	UserID          int64
	Username        string
	FirstName       string
	LastName        string
	Height          int
	ChestSize       int
	Oversize        bool
	RecommendedSize string
	Question        string
	Status          string // "open", "closed"
	CreatedAt       time.Time
	LastMessage     time.Time
}

type ManagerQuestion struct {
	UserID    int64
	Username  string
	FirstName string
	LastName  string
	Question  string
	Timestamp time.Time
}

type Product struct {
	Name     string
	Sizes    []string
	Link     string
	ImageURL string
}

var userStates = make(map[int64]*UserState)
var questionStates = make(map[int64]bool) // true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
var tickets = make(map[int]*Ticket)       // –≤—Å–µ —Ç–∏–∫–µ—Ç—ã
var userTickets = make(map[int64]int)     // —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> ID —Ç–∏–∫–µ—Ç–∞
var nextTicketID = 1
var managerID int64 = 0 // @Shpinatyamba - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

var products = []Product{
	{"–§—É—Ç–±–æ–ª–∫–∞ –ö—Ä—ã–ª–∞—Ç—ã–µ –§—Ä–∞–∑—ã –±–µ–ª–∞—è", []string{"S", "M", "L", "XL", "XXL"}, "https://osteomerch.com/katalog/item/colorful-jumper-with-horizontal-stripes/", "./katalog/–ö—Ä—ã–ª–∞—Ç—ã–µ –§—Ä–∞–∑—ã/1.jpg"},
	{"–§—É—Ç–±–æ–ª–∫–∞ Black to Black —á–µ—Ä–Ω–∞—è", []string{"S", "M", "L", "XL", "XXL"}, "https://osteomerch.com/katalog/item/black-suede-pleated-skirt/", "./katalog/Black to Black/1.jpg"},
	{"–§—É—Ç–±–æ–ª–∫–∞ Black to Black 2 —á–µ—Ä–Ω–∞—è", []string{"S", "M", "L", "XL", "XXL"}, "https://osteomerch.com/katalog/item/black-wide-suede-pants-with-white-stripes/", "./katalog/Black to Black 2/1.jpg"},
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Println("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_BOT_TOKEN"))
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω", bot.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
	managerIDStr := os.Getenv("MANAGER_ID")
	if managerIDStr != "" {
		var err error
		managerID, err = strconv.ParseInt(managerIDStr, 10, 64)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MANAGER_ID: %v", err)
			managerID = 123456789 // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		} else {
			log.Printf("ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d", managerID)
		}
	} else {
		log.Printf("MANAGER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %d", managerID)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ –ø–∏–Ω–≥ –¥–ª—è Render
	go startSelfPing()

	// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
	for {
		runBot(bot)
		log.Println("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
		time.Sleep(5 * time.Second)
	}
}

func runBot(bot *tgbotapi.BotAPI) {
	defer func() {
		if r := recover(); r != nil {
			log.Printf("–ü–∞–Ω–∏–∫–∞ –≤ –±–æ—Ç–µ: %v", r)
		}
	}()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(bot, update.Message)
		} else if update.CallbackQuery != nil {
			handleCallbackQuery(bot, update.CallbackQuery)
		}
	}
}

func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID

	switch message.Text {
	case "/start":
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
		if isManagerResponse(message) {
			sendManagerMenu(bot, chatID)
		} else {
			sendMainMenu(bot, chatID)
		}
	default:
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
		if isManagerResponse(message) {
			handleManagerResponse(bot, message)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
		if questionStates[chatID] {
			handleManagerQuestion(bot, message)
			return
		}

		state, exists := userStates[chatID]
		if exists {
			handleSurveyResponse(bot, message, state)
		} else {
			msg := tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
			bot.Send(msg)
		}
	}
}

func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç Osteomerch. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–¥–µ–∂–¥—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏:")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–æ–±—Ä–∞—Ç—å", "select"),
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "browse"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞ —Å–∞–π—Ç–µ", "https://osteomerch.com/katalog/"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "contact_manager"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func sendManagerMenu(bot *tgbotapi.BotAPI, chatID int64) {
	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–∫–µ—Ç–æ–≤
	openTickets := 0
	closedTickets := 0
	for _, ticket := range tickets {
		if ticket.Status == "open" {
			openTickets++
		} else {
			closedTickets++
		}
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ–Ω–µ–¥–∂–µ—Ä!\n\nüìä –¢–∏–∫–µ—Ç—ã: üü¢ %d –æ—Ç–∫—Ä—ã—Ç—ã—Ö | üî¥ %d –∑–∞–∫—Ä—ã—Ç—ã—Ö\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", openTickets, closedTickets))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìè –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä", "start_survey"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìö –ö–∞—Ç–∞–ª–æ–≥", "catalog"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –ö–ª–∏–µ–Ω—Ç—ã", "manager_tickets"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleCallbackQuery(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	log.Printf("–ü–æ–ª—É—á–µ–Ω callback: %s –¥–ª—è —á–∞—Ç–∞ %d", callback.Data, chatID)

	switch callback.Data {
	case "select":
		log.Printf("–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		startSurvey(bot, chatID)
	case "browse":
		log.Printf("–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		showCatalog(bot, chatID)
	case "contact_manager":
		log.Printf("–ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		showContactManagerMenu(bot, chatID)
	case "contact_manager_direct":
		log.Printf("–ü—Ä—è–º–∞—è —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		contactManagerDirect(bot, chatID)
	case "back_to_menu":
		log.Printf("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		sendMainMenu(bot, chatID)
	case "oversize_yes":
		handleOversizeCallback(bot, chatID, true)
	case "oversize_no":
		handleOversizeCallback(bot, chatID, false)
	case "manager_tickets":
		handleManagerTicketsCallback(bot, chatID)
	case "manager_open_tickets":
		handleManagerOpenTicketsCallback(bot, chatID)
	case "manager_closed_tickets":
		handleManagerClosedTicketsCallback(bot, chatID)
	case "manager_stats":
		handleManagerStatsCallback(bot, chatID)
	case "manager_help":
		handleManagerHelpCallback(bot, chatID)
	case "back_to_manager_menu":
		sendManagerMenu(bot, chatID)
	case "start_survey":
		// –ï—Å–ª–∏ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞
		if isManagerResponse(&tgbotapi.Message{Chat: &tgbotapi.Chat{ID: chatID}}) {
			startSurvey(bot, chatID)
		} else {
			startSurvey(bot, chatID)
		}
	case "catalog":
		showCatalog(bot, chatID)
	case "help":
		// –ï—Å–ª–∏ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫—É—é –ø–æ–º–æ—â—å
		if isManagerResponse(&tgbotapi.Message{Chat: &tgbotapi.Chat{ID: chatID}}) {
			handleManagerHelpCallback(bot, chatID)
		} else {
			sendMainMenu(bot, chatID)
		}
	default:
		if strings.HasPrefix(callback.Data, "tee_") {
			selectedTee := strings.TrimPrefix(callback.Data, "tee_")
			log.Printf("–í—ã–±—Ä–∞–Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ %s –¥–ª—è —á–∞—Ç–∞ %d", selectedTee, chatID)
			startHeightQuestion(bot, chatID, selectedTee)
		} else if strings.HasPrefix(callback.Data, "ticket_") {
			handleTicketButtonCallback(bot, chatID, callback.Data)
		}
	}

	bot.Request(tgbotapi.NewCallback(callback.ID, ""))
}

func startSurvey(bot *tgbotapi.BotAPI, chatID int64) {
	log.Printf("–ù–∞—á–∏–Ω–∞—é –æ–ø—Ä–æ—Å –¥–ª—è —á–∞—Ç–∞ %d", chatID)
	userStates[chatID] = &UserState{Step: 1}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –º–µ—Ä—á:")
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	for i, product := range products {
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–í—ã–±—Ä–∞—Ç—å", fmt.Sprintf("tee_%d", i)),
			),
		)

		// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(product.ImageURL))
		photo.Caption = fmt.Sprintf("%s\n\n–†–∞–∑–º–µ—Ä—ã: %s", product.Name, strings.Join(product.Sizes, ", "))
		photo.ReplyMarkup = keyboard

		if _, err := bot.Send(photo); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è %s: %v, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", product.Name, err)

			// –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			textMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("%s\n\n–†–∞–∑–º–µ—Ä—ã: %s", product.Name, strings.Join(product.Sizes, ", ")))
			textMsg.ReplyMarkup = keyboard
			if _, textErr := bot.Send(textMsg); textErr != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", textErr)
			}
		}
	}
}

func startHeightQuestion(bot *tgbotapi.BotAPI, chatID int64, selectedTee string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	state, exists := userStates[chatID]
	if !exists {
		// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
		state = &UserState{Step: 1}
		userStates[chatID] = state
	}

	state.Step = 2
	state.SelectedTee = selectedTee

	msg := tgbotapi.NewMessage(chatID, "–í–∞—à —Ä–æ—Å—Ç? (–≤ —Å–º)")
	bot.Send(msg)
}

func handleSurveyResponse(bot *tgbotapi.BotAPI, message *tgbotapi.Message, state *UserState) {
	chatID := message.Chat.ID

	switch state.Step {
	case 2:
		height, err := strconv.Atoi(message.Text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175)")
			bot.Send(msg)
			return
		}

		if height < 100 || height > 250 {
			msg := tgbotapi.NewMessage(chatID, "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
			bot.Send(msg)
			return
		}

		state.Height = height
		state.Step = 3
		msg := tgbotapi.NewMessage(chatID, "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏? (–≤ —Å–º)")
		bot.Send(msg)

	case 3:
		chestSize, err := strconv.Atoi(message.Text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90)")
			bot.Send(msg)
			return
		}

		if chestSize < 70 || chestSize > 130 {
			msg := tgbotapi.NewMessage(chatID, "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 70 –¥–æ 130 —Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
			bot.Send(msg)
			return
		}

		state.ChestSize = chestSize
		state.Step = 4
		askOversizeQuestion(bot, chatID)

	case 4:
		response := strings.ToLower(message.Text)
		switch response {
		case "–¥–∞", "yes":
			state.Oversize = true
		case "–Ω–µ—Ç", "no":
			state.Oversize = false
		default:
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
			bot.Send(msg)
			return
		}
		showRecommendations(bot, chatID, state)
		delete(userStates, chatID)
	}
}

func askOversizeQuestion(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ–≤–µ—Ä—Å–∞–π–∑ –º–æ–¥–µ–ª—å?")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–∞", "oversize_yes"),
			tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", "oversize_no"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleOversizeCallback(bot *tgbotapi.BotAPI, chatID int64, oversize bool) {
	state, exists := userStates[chatID]
	if !exists {
		return
	}

	state.Oversize = oversize
	showRecommendations(bot, chatID, state)
	delete(userStates, chatID)
}

func showContactManagerMenu(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", "contact_manager_direct"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func contactManagerDirect(bot *tgbotapi.BotAPI, chatID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
	if ticketID, exists := userTickets[chatID]; exists {
		if ticket, found := tickets[ticketID]; found && ticket.Status == "open" {
			msg := tgbotapi.NewMessage(chatID, "üí¨ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
			bot.Send(msg)
			return
		}
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç —Å—Ä–∞–∑—É –∏ –ø—Ä–æ—Å–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å
	createTicketAndAskQuestion(bot, chatID)
}

func createTicketAndAskQuestion(bot *tgbotapi.BotAPI, chatID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
	state, exists := userStates[chatID]

	// –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –±–µ–∑ –Ω–∏—Ö
	var ticket *Ticket
	if exists {
		// –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
		recommendedSize := calculateSize(state.ChestSize, state.Oversize)
		ticket = &Ticket{
			ID:              nextTicketID,
			UserID:          chatID,
			Username:        "", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
			FirstName:       "", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
			LastName:        "", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
			Height:          state.Height,
			ChestSize:       state.ChestSize,
			Oversize:        state.Oversize,
			RecommendedSize: recommendedSize,
			Question:        "",
			Status:          "open",
			CreatedAt:       time.Now(),
			LastMessage:     time.Now(),
		}
	} else {
		// –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ - —Å–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –±–µ–∑ –Ω–∏—Ö
		ticket = &Ticket{
			ID:              nextTicketID,
			UserID:          chatID,
			Username:        "", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
			FirstName:       "", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
			LastName:        "", // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
			Height:          0,
			ChestSize:       0,
			Oversize:        false,
			RecommendedSize: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
			Question:        "",
			Status:          "open",
			CreatedAt:       time.Now(),
			LastMessage:     time.Now(),
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç
	tickets[nextTicketID] = ticket
	userTickets[chatID] = nextTicketID
	nextTicketID++

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
	sendClientCardToManager(bot, ticket)

	// –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å
	msg := tgbotapi.NewMessage(chatID, "‚úÖ –°–æ–∑–¥–∞–Ω –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!\n\n–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å? –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)

	// –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
	questionStates[chatID] = true
}

func sendClientCardToManager(bot *tgbotapi.BotAPI, ticket *Ticket) {
	oversizeText := "–ù–µ—Ç"
	if ticket.Oversize {
		oversizeText = "–î–∞"
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
	var messageText string
	if ticket.Height > 0 && ticket.ChestSize > 0 {
		// –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
		messageText = fmt.Sprintf("üé´ –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #%d\n\n"+
			"üë§ –ö–ª–∏–µ–Ω—Ç: %s %s (@%s)\n"+
			"üÜî ID: %d\n"+
			"üìè –†–æ—Å—Ç: %d —Å–º\n"+
			"üìê –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: %d —Å–º\n"+
			"üëï –û–≤–µ—Ä—Å–∞–π–∑: %s\n"+
			"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: %s\n"+
			"üïê –°–æ–∑–¥–∞–Ω: %s\n\n"+
			"üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–º",
			ticket.ID,
			ticket.FirstName,
			ticket.LastName,
			ticket.Username,
			ticket.UserID,
			ticket.Height,
			ticket.ChestSize,
			oversizeText,
			ticket.RecommendedSize,
			ticket.CreatedAt.Format("15:04 02.01.2006"))
	} else {
		// –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
		messageText = fmt.Sprintf("üé´ –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #%d\n\n"+
			"üë§ –ö–ª–∏–µ–Ω—Ç: %s %s (@%s)\n"+
			"üÜî ID: %d\n"+
			"üìè –†–æ—Å—Ç: –ù–µ —É–∫–∞–∑–∞–Ω\n"+
			"üìê –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: –ù–µ —É–∫–∞–∑–∞–Ω\n"+
			"üëï –û–≤–µ—Ä—Å–∞–π–∑: –ù–µ —É–∫–∞–∑–∞–Ω\n"+
			"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: %s\n"+
			"üïê –°–æ–∑–¥–∞–Ω: %s\n\n"+
			"üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–º",
			ticket.ID,
			ticket.FirstName,
			ticket.LastName,
			ticket.Username,
			ticket.UserID,
			ticket.RecommendedSize,
			ticket.CreatedAt.Format("15:04 02.01.2006"))
	}

	msg := tgbotapi.NewMessage(managerID, messageText)
	bot.Send(msg)

	log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #%d –º–µ–Ω–µ–¥–∂–µ—Ä—É", ticket.ID)
}

func handleManagerQuestion(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	question := message.Text

	// –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	ticketID, exists := userTickets[chatID]
	if !exists {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
		bot.Send(msg)
		delete(questionStates, chatID)
		return
	}

	ticket, found := tickets[ticketID]
	if !found || ticket.Status != "open" {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
		bot.Send(msg)
		delete(questionStates, chatID)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∏–∫–µ—Ç–µ
	ticket.Username = message.From.UserName
	ticket.FirstName = message.From.FirstName
	ticket.LastName = message.From.LastName
	ticket.Question = question
	ticket.LastMessage = time.Now()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
	messageText := fmt.Sprintf("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–∏–∫–µ—Ç #%d):\n\n%s", ticketID, question)
	msg := tgbotapi.NewMessage(managerID, messageText)
	bot.Send(msg)

	log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –≤ —Ç–∏–∫–µ—Ç #%d", chatID, ticketID)
}

func isManagerResponse(message *tgbotapi.Message) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
	if managerID != 0 && message.From.ID == managerID {
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
	if message.From.UserName == "Shpinatyamba" {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
		if managerID == 0 {
			managerID = message.From.ID
			log.Printf("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞: %d (@%s)", managerID, message.From.UserName)
		}
		return true
	}

	return false
}

func handleManagerResponse(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	text := message.Text

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
	if ticketID, exists := userTickets[message.Chat.ID]; exists {
		handleManagerReplyToTicket(bot, message, ticketID)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
	switch {
	case strings.HasPrefix(text, "–û—Ç–≤–µ—Ç:"):
		handleOldReplyFormat(bot, message)
	default:
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
		sendManagerMenu(bot, message.Chat.ID)
	}
}

func handleManagerReplyToTicket(bot *tgbotapi.BotAPI, message *tgbotapi.Message, ticketID int) {
	ticket, exists := tickets[ticketID]
	if !exists {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		delete(userTickets, message.Chat.ID)
		return
	}

	if ticket.Status != "open" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
		bot.Send(msg)
		delete(userTickets, message.Chat.ID)
		return
	}

	replyText := message.Text

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
	responseMsg := tgbotapi.NewMessage(ticket.UserID, fmt.Sprintf("üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n%s", replyText))
	bot.Send(responseMsg)

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	ticket.LastMessage = time.Now()

	// –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
	delete(userTickets, message.Chat.ID)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
	confirmMsg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–∏–∫–µ—Ç #%d", ticketID))
	bot.Send(confirmMsg)

	log.Printf("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–∏–∫–µ—Ç #%d —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: %s", ticketID, replyText)
}

func handleManagerTicketsCallback(bot *tgbotapi.BotAPI, chatID int64) {
	if len(tickets) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üì≠ –ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç—ã –ø–æ 5 —à—Ç—É–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	showTicketsWithButtons(bot, chatID, tickets, "üé´ –í—Å–µ —Ç–∏–∫–µ—Ç—ã")
}

func handleManagerOpenTicketsCallback(bot *tgbotapi.BotAPI, chatID int64) {
	openTickets := make(map[int]*Ticket)
	for _, ticket := range tickets {
		if ticket.Status == "open" {
			openTickets[ticket.ID] = ticket
		}
	}

	if len(openTickets) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	showTicketsWithButtons(bot, chatID, openTickets, "üÜï –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã")
}

func handleManagerClosedTicketsCallback(bot *tgbotapi.BotAPI, chatID int64) {
	closedTickets := make(map[int]*Ticket)
	for _, ticket := range tickets {
		if ticket.Status == "closed" {
			closedTickets[ticket.ID] = ticket
		}
	}

	if len(closedTickets) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üì≠ –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
		return
	}

	showTicketsWithButtons(bot, chatID, closedTickets, "üî¥ –ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã")
}

func showTicketsWithButtons(bot *tgbotapi.BotAPI, chatID int64, ticketsToShow map[int]*Ticket, title string) {
	var text strings.Builder
	text.WriteString(fmt.Sprintf("%s (%d):\n\n", title, len(ticketsToShow)))

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–∫–µ—Ç—ã –ø–æ ID
	var ticketIDs []int
	for id := range ticketsToShow {
		ticketIDs = append(ticketIDs, id)
	}
	sort.Ints(ticketIDs)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–∏–∫–µ—Ç–æ–≤
	limit := 10
	if len(ticketIDs) > limit {
		limit = len(ticketIDs)
	}

	for i := 0; i < limit && i < len(ticketIDs); i++ {
		ticket := ticketsToShow[ticketIDs[i]]
		status := "üü¢"
		if ticket.Status == "closed" {
			status = "üî¥"
		}

		text.WriteString(fmt.Sprintf("%s #%d %s %s\n",
			status,
			ticket.ID,
			ticket.FirstName,
			ticket.LastName))
	}

	if len(ticketIDs) > 10 {
		text.WriteString(fmt.Sprintf("\n... –∏ –µ—â–µ %d —Ç–∏–∫–µ—Ç–æ–≤", len(ticketIDs)-10))
	}

	msg := tgbotapi.NewMessage(chatID, text.String())

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5 –≤ —Ä—è–¥)
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < limit && i < len(ticketIDs); i++ {
		ticketID := ticketIDs[i]
		ticket := ticketsToShow[ticketID]

		buttonText := fmt.Sprintf("#%d %s", ticketID, ticket.FirstName)
		if len(buttonText) > 20 {
			buttonText = fmt.Sprintf("#%d", ticketID)
		}

		button := tgbotapi.NewInlineKeyboardButtonData(buttonText, fmt.Sprintf("ticket_view_%d", ticketID))

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥
		if len(keyboard) == 0 || len(keyboard[len(keyboard)-1]) >= 2 {
			keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
		} else {
			keyboard[len(keyboard)-1] = append(keyboard[len(keyboard)-1], button)
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
	})

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	bot.Send(msg)
}

func handleTicketButtonCallback(bot *tgbotapi.BotAPI, chatID int64, callbackData string) {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
	if strings.HasPrefix(callbackData, "ticket_view_") {
		ticketIDStr := strings.TrimPrefix(callbackData, "ticket_view_")
		ticketID, err := strconv.Atoi(ticketIDStr)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ ID —Ç–∏–∫–µ—Ç–∞")
			bot.Send(msg)
			return
		}
		showTicketDetails(bot, chatID, ticketID)
	} else if strings.HasPrefix(callbackData, "ticket_reply_") {
		ticketIDStr := strings.TrimPrefix(callbackData, "ticket_reply_")
		ticketID, err := strconv.Atoi(ticketIDStr)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ ID —Ç–∏–∫–µ—Ç–∞")
			bot.Send(msg)
			return
		}
		startTicketReply(bot, chatID, ticketID)
	} else if strings.HasPrefix(callbackData, "ticket_close_") {
		ticketIDStr := strings.TrimPrefix(callbackData, "ticket_close_")
		ticketID, err := strconv.Atoi(ticketIDStr)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ ID —Ç–∏–∫–µ—Ç–∞")
			bot.Send(msg)
			return
		}
		closeTicketFromButton(bot, chatID, ticketID)
	} else if strings.HasPrefix(callbackData, "ticket_open_") {
		ticketIDStr := strings.TrimPrefix(callbackData, "ticket_open_")
		ticketID, err := strconv.Atoi(ticketIDStr)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ ID —Ç–∏–∫–µ—Ç–∞")
			bot.Send(msg)
			return
		}
		openTicketFromButton(bot, chatID, ticketID)
	}
}

func showTicketDetails(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	ticket, exists := tickets[ticketID]
	if !exists {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	oversizeText := "–ù–µ—Ç"
	if ticket.Oversize {
		oversizeText = "–î–∞"
	}

	status := "üü¢ –û—Ç–∫—Ä—ã—Ç"
	if ticket.Status == "closed" {
		status = "üî¥ –ó–∞–∫—Ä—ã—Ç"
	}

	var text string
	if ticket.Height > 0 && ticket.ChestSize > 0 {
		// –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
		text = fmt.Sprintf("üé´ –¢–∏–∫–µ—Ç #%d %s\n\n"+
			"üë§ –ö–ª–∏–µ–Ω—Ç: %s %s (@%s)\n"+
			"üÜî ID: %d\n"+
			"üìè –†–æ—Å—Ç: %d —Å–º\n"+
			"üìê –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: %d —Å–º\n"+
			"üëï –û–≤–µ—Ä—Å–∞–π–∑: %s\n"+
			"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: %s\n"+
			"‚ùì –í–æ–ø—Ä–æ—Å: %s\n"+
			"üïê –°–æ–∑–¥–∞–Ω: %s\n"+
			"üí¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s",
			ticket.ID, status,
			ticket.FirstName, ticket.LastName, ticket.Username,
			ticket.UserID,
			ticket.Height,
			ticket.ChestSize,
			oversizeText,
			ticket.RecommendedSize,
			ticket.Question,
			ticket.CreatedAt.Format("15:04 02.01.2006"),
			ticket.LastMessage.Format("15:04 02.01.2006"))
	} else {
		// –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
		text = fmt.Sprintf("üé´ –¢–∏–∫–µ—Ç #%d %s\n\n"+
			"üë§ –ö–ª–∏–µ–Ω—Ç: %s %s (@%s)\n"+
			"üÜî ID: %d\n"+
			"üìè –†–æ—Å—Ç: –ù–µ —É–∫–∞–∑–∞–Ω\n"+
			"üìê –û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: –ù–µ —É–∫–∞–∑–∞–Ω\n"+
			"üëï –û–≤–µ—Ä—Å–∞–π–∑: –ù–µ —É–∫–∞–∑–∞–Ω\n"+
			"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: %s\n"+
			"‚ùì –í–æ–ø—Ä–æ—Å: %s\n"+
			"üïê –°–æ–∑–¥–∞–Ω: %s\n"+
			"üí¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s",
			ticket.ID, status,
			ticket.FirstName, ticket.LastName, ticket.Username,
			ticket.UserID,
			ticket.RecommendedSize,
			ticket.Question,
			ticket.CreatedAt.Format("15:04 02.01.2006"),
			ticket.LastMessage.Format("15:04 02.01.2006"))
	}

	msg := tgbotapi.NewMessage(chatID, text)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
	var keyboard [][]tgbotapi.InlineKeyboardButton

	if ticket.Status == "open" {
		// –î–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", fmt.Sprintf("ticket_reply_%d", ticketID)),
			tgbotapi.NewInlineKeyboardButtonData("üîí –ó–∞–∫—Ä—ã—Ç—å", fmt.Sprintf("ticket_close_%d", ticketID)),
		})
	} else {
		// –î–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: –æ—Ç–∫—Ä—ã—Ç—å
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üîì –û—Ç–∫—Ä—ã—Ç—å", fmt.Sprintf("ticket_open_%d", ticketID)),
		})
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "manager_tickets"),
	})

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	bot.Send(msg)
}

func startTicketReply(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
	userTickets[chatID] = ticketID

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üí¨ –û—Ç–≤–µ—Ç –≤ —Ç–∏–∫–µ—Ç #%d\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:", ticketID))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", fmt.Sprintf("ticket_view_%d", ticketID)),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func closeTicketFromButton(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	ticket, exists := tickets[ticketID]
	if !exists {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	if ticket.Status == "closed" {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
		bot.Send(msg)
		return
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
	ticket.Status = "closed"

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	closeMsg := tgbotapi.NewMessage(ticket.UserID, "üîí –î–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")
	bot.Send(closeMsg)

	// –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
	delete(questionStates, ticket.UserID)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
	confirmMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –¢–∏–∫–µ—Ç #%d –∑–∞–∫—Ä—ã—Ç", ticketID))
	bot.Send(confirmMsg)

	log.Printf("–¢–∏–∫–µ—Ç #%d –∑–∞–∫—Ä—ã—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É", ticketID)
}

func openTicketFromButton(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	ticket, exists := tickets[ticketID]
	if !exists {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	if ticket.Status == "open" {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç")
		bot.Send(msg)
		return
	}

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
	ticket.Status = "open"

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	openMsg := tgbotapi.NewMessage(ticket.UserID, "üîì –î–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
	bot.Send(openMsg)

	// –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
	questionStates[ticket.UserID] = true

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
	confirmMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –¢–∏–∫–µ—Ç #%d –æ—Ç–∫—Ä—ã—Ç", ticketID))
	bot.Send(confirmMsg)

	log.Printf("–¢–∏–∫–µ—Ç #%d –æ—Ç–∫—Ä—ã—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É", ticketID)
}

func handleManagerStatsCallback(bot *tgbotapi.BotAPI, chatID int64) {
	totalTickets := len(tickets)
	openTickets := 0
	closedTickets := 0

	for _, ticket := range tickets {
		if ticket.Status == "open" {
			openTickets++
		} else {
			closedTickets++
		}
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤:\n\n"+
		"üìà –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: %d\n"+
		"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: %d\n"+
		"üî¥ –ó–∞–∫—Ä—ã—Ç—ã—Ö: %d\n"+
		"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: %d",
		totalTickets, openTickets, closedTickets, nextTicketID-1))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleManagerHelpCallback(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "‚ùì –ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n\n"+
		"üîò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n"+
		"‚Ä¢ –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ç—ã\n"+
		"‚Ä¢ –ù–æ–≤—ã–µ —Ç–∏–∫–µ—Ç—ã - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö\n"+
		"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"+
		"‚Ä¢ –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"+
		"üí° –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleOldReplyFormat(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	// –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	parts := strings.SplitN(message.Text, " ", 3)
	if len(parts) >= 3 {
		userID, err := strconv.ParseInt(parts[1], 10, 64)
		if err != nil {
			msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –û—Ç–≤–µ—Ç: [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [—Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞]")
			bot.Send(msg)
			return
		}

		answerText := parts[2]
		responseMsg := tgbotapi.NewMessage(userID, fmt.Sprintf("üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n%s", answerText))
		bot.Send(responseMsg)

		confirmMsg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userID))
		bot.Send(confirmMsg)

		log.Printf("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s", userID, answerText)
	} else {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –û—Ç–≤–µ—Ç: [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [—Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞]")
		bot.Send(msg)
	}
}

func showRecommendations(bot *tgbotapi.BotAPI, chatID int64, state *UserState) {
	log.Printf("–ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞ %d, —Ç–æ–≤–∞—Ä: %s", chatID, state.SelectedTee)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SelectedTee –Ω–µ –ø—É—Å—Ç–æ–π
	if state.SelectedTee == "" {
		log.Printf("–û—à–∏–±–∫–∞: SelectedTee –ø—É—Å—Ç–æ–π –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		bot.Send(msg)
		return
	}

	teeIndex, err := strconv.Atoi(state.SelectedTee)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç–æ–≤–∞—Ä–∞: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		bot.Send(msg)
		return
	}

	if teeIndex < 0 || teeIndex >= len(products) {
		log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞: %d, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: %d", teeIndex, len(products))
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		bot.Send(msg)
		return
	}

	product := products[teeIndex]

	size := calculateSize(state.ChestSize, state.Oversize)

	responseText := fmt.Sprintf("–í–∞–º –ø–æ–¥–æ–π–¥—É—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏:\n\n%s - —Ä–∞–∑–º–µ—Ä %s",
		product.Name, size)

	msg := tgbotapi.NewMessage(chatID, responseText)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
	isManager := isManagerResponse(&tgbotapi.Message{Chat: &tgbotapi.Chat{ID: chatID}})
	
	var keyboard tgbotapi.InlineKeyboardMarkup
	if isManager {
		// –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–µ –º–µ–Ω—é
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìè –ü–æ–¥–æ–±—Ä–∞—Ç—å –µ—â–µ", "start_survey"),
				tgbotapi.NewInlineKeyboardButtonData("üìö –ö–∞—Ç–∞–ª–æ–≥", "catalog"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üë• –ö–ª–∏–µ–Ω—Ç—ã", "manager_tickets"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("–ö—É–ø–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", product.Link),
				tgbotapi.NewInlineKeyboardButtonURL("–í–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥", "https://osteomerch.com/katalog/"),
			),
		)
	} else {
		// –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–æ–±—Ä–∞—Ç—å –µ—â–µ", "select"),
				tgbotapi.NewInlineKeyboardButtonData("–ö–∞—Ç–∞–ª–æ–≥", "browse"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonURL("–ö—É–ø–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", product.Link),
				tgbotapi.NewInlineKeyboardButtonURL("–í–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥", "https://osteomerch.com/katalog/"),
			),
		)
	}

	msg.ReplyMarkup = keyboard
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: %v", err)
	}
}

func calculateSize(chestSize int, oversize bool) string {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ –æ–±—Ö–≤–∞—Ç—É –≥—Ä—É–¥–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞–±–ª–∏—Ü–µ
	var sizeRange string

	if chestSize >= 70 && chestSize <= 89 {
		sizeRange = "XS-S"
	} else if chestSize >= 90 && chestSize <= 97 {
		sizeRange = "M-L"
	} else if chestSize >= 98 && chestSize <= 105 {
		sizeRange = "XL-2XL"
	} else if chestSize >= 106 && chestSize <= 113 {
		sizeRange = "3XL-4XL"
	} else if chestSize >= 114 && chestSize <= 121 {
		sizeRange = "5XL-6XL"
	} else if chestSize >= 122 && chestSize <= 130 {
		sizeRange = "7XL-8XL"
	} else if chestSize < 70 {
		return "XS-S (—Ä–∞–∑–º–µ—Ä –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ)"
	} else {
		return "7XL-8XL (—Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ)"
	}

	// –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω –æ–≤–µ—Ä—Å–∞–π–∑, –±–µ—Ä–µ–º –±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
	if oversize {
		switch sizeRange {
		case "XS-S":
			return "M-L"
		case "M-L":
			return "XL-2XL"
		case "XL-2XL":
			return "3XL-4XL"
		case "3XL-4XL":
			return "5XL-6XL"
		case "5XL-6XL":
			return "7XL-8XL"
		case "7XL-8XL":
			return "7XL-8XL (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)"
		}
	}

	return sizeRange
}

func showCatalog(bot *tgbotapi.BotAPI, chatID int64) {
	log.Printf("–ü–æ–∫–∞–∑—ã–≤–∞—é –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —á–∞—Ç–∞ %d", chatID)

	msg := tgbotapi.NewMessage(chatID, "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:")
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: %v", err)
		return
	}

	for _, product := range products {
		// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(product.ImageURL))
		photo.Caption = fmt.Sprintf("%s\n–†–∞–∑–º–µ—Ä—ã: %s\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç: [%s](%s)",
			product.Name, strings.Join(product.Sizes, ", "), product.Name, product.Link)
		photo.ParseMode = "MarkdownV2"

		if _, err := bot.Send(photo); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è %s: %v, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", product.Name, err)

			// –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			textMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("%s\n–†–∞–∑–º–µ—Ä—ã: %s\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç: [%s](%s)",
				product.Name, strings.Join(product.Sizes, ", "), product.Name, product.Link))
			textMsg.ParseMode = "MarkdownV2"
			if _, textErr := bot.Send(textMsg); textErr != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: %v", textErr)
			}
		}
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
	isManager := isManagerResponse(&tgbotapi.Message{Chat: &tgbotapi.Chat{ID: chatID}})
	
	var keyboard tgbotapi.InlineKeyboardMarkup
	if isManager {
		// –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–µ –º–µ–Ω—é
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìè –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä", "start_survey"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üë• –ö–ª–∏–µ–Ω—Ç—ã", "manager_tickets"),
			),
		)
	} else {
		// –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–æ–±—Ä–∞—Ç—å", "select"),
			),
		)
	}

	finalMsg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	finalMsg.ReplyMarkup = keyboard
	if _, err := bot.Send(finalMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: %v", err)
	}
}

func startSelfPing() {
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∞–º–æ –ø–∏–Ω–≥–∞
	http.HandleFunc("/ping", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("pong"))
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Printf("–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–∞–º–æ –ø–∏–Ω–≥–∞ –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
		if err := http.ListenAndServe(":"+port, nil); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	// –ü–∏–Ω–≥—É–µ–º —Å–µ–±—è –∫–∞–∂–¥—ã–µ 40 —Å–µ–∫—É–Ω–¥
	url := fmt.Sprintf("http://localhost:%s/ping", port)

	for {
		time.Sleep(40 * time.Second)

		resp, err := http.Get(url)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–∞–º–æ –ø–∏–Ω–≥–∞: %v", err)
			continue
		}
		resp.Body.Close()

		if resp.StatusCode == http.StatusOK {
			log.Println("–°–∞–º–æ –ø–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
		} else {
			log.Printf("–°–∞–º–æ –ø–∏–Ω–≥ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
		}
	}
}
