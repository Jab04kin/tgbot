package main

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

type UserState struct {
	Step            int
	SelectedTee     string
	Height          int
	ChestSize       int
	Oversize        bool
	RecommendedSize string
}

type Product struct {
	Name     string
	Sizes    []string
	Link     string
	ImageURL string
}

var userStates = make(map[int64]*UserState)
var questionStates = make(map[int64]bool)    // true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
var messageModeStates = make(map[int64]bool) // true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∏–∫–µ—Ç
var nameCollectState = make(map[int64]bool)  // true –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º

var products = []Product{
	{"–§—É—Ç–±–æ–ª–∫–∞ –ö—Ä—ã–ª–∞—Ç—ã–µ –§—Ä–∞–∑—ã –±–µ–ª–∞—è", []string{"S", "M", "L", "XL", "XXL"}, "https://osteomerch.com/katalog/item/colorful-jumper-with-horizontal-stripes/", "./katalog/–ö—Ä—ã–ª–∞—Ç—ã–µ –§—Ä–∞–∑—ã/1.jpg"},
	{"–§—É—Ç–±–æ–ª–∫–∞ Black to Black —á–µ—Ä–Ω–∞—è", []string{"S", "M", "L", "XL", "XXL"}, "https://osteomerch.com/katalog/item/black-suede-pleated-skirt/", "./katalog/Black to Black/1.jpg"},
	{"–§—É—Ç–±–æ–ª–∫–∞ Black to Black 2 —á–µ—Ä–Ω–∞—è", []string{"S", "M", "L", "XL", "XXL"}, "https://osteomerch.com/katalog/item/black-wide-suede-pants-with-white-stripes/", "./katalog/Black to Black 2/1.jpg"},
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Println("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–∫–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
	loadTickets()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–ª–∏
	initAdmins()
	initManagers()

	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_BOT_TOKEN"))
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω", bot.Self.UserName)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	go startHTTPServer()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ–ø–∏–Ω–≥
	startSelfPing()

	// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
	for {
		runBot(bot)
		log.Println("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
		time.Sleep(5 * time.Second)
	}
}

func runBot(bot *tgbotapi.BotAPI) {
	defer func() {
		if r := recover(); r != nil {
			log.Printf("–ü–∞–Ω–∏–∫–∞ –≤ –±–æ—Ç–µ: %v", r)
		}
	}()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(bot, update.Message)
		} else if update.CallbackQuery != nil {
			handleCallbackQuery(bot, update.CallbackQuery)
		}
	}
}

func startHTTPServer() {
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	http.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, "OK")
	})

	log.Printf("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", port)
	if err := http.ListenAndServe(":"+port, nil); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

// –§—É–Ω–∫—Ü–∏—è —Å–∞–º–æ–ø–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
func startSelfPing() {
	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		pingInterval := 40 * time.Second
		log.Printf("üîÑ –ó–∞–ø—É—â–µ–Ω —Å–∞–º–æ–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ %v –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è", pingInterval)

		// helper: –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π URL
		resolveURL := func() string {
			if u := os.Getenv("SELF_PING_URL"); u != "" {
				return u
			}
			port := os.Getenv("PORT")
			if port == "" {
				port = "8080"
			}
			return fmt.Sprintf("http://localhost:%s/health", port)
		}

		client := &http.Client{Timeout: 5 * time.Second}

		// –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–∏–Ω–≥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
		func() {
			url := resolveURL()
			resp, err := client.Get(url)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞ (—Å—Ç–∞—Ä—Ç): %v (URL: %s)", err, url)
				return
			}
			resp.Body.Close()
			if resp.StatusCode == http.StatusOK {
				log.Printf("‚úÖ –°–∞–º–æ–ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ä—Ç): %s", url)
			} else {
				log.Printf("‚ö†Ô∏è –°–∞–º–æ–ø–∏–Ω–≥ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å (—Å—Ç–∞—Ä—Ç): %d –¥–ª—è %s", resp.StatusCode, url)
			}
		}()

		ticker := time.NewTicker(pingInterval)
		defer ticker.Stop()
		for range ticker.C {
			url := resolveURL()
			resp, err := client.Get(url)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞: %v (URL: %s)", err, url)
				continue
			}
			resp.Body.Close()
			if resp.StatusCode == http.StatusOK {
				log.Printf("‚úÖ –°–∞–º–æ–ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: %s", url)
			} else {
				log.Printf("‚ö†Ô∏è –°–∞–º–æ–ø–∏–Ω–≥ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: %d –¥–ª—è %s", resp.StatusCode, url)
			}
		}
	}()
}

func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID

	switch message.Text {
	case "/start":
		// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π: —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é, —É –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ
		if isManagerUser(message.From) {
			clearManagerStates(chatID)
		} else {
			clearClientStates(chatID)
		}
		// –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞: –ø–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω—É
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
		if isManagerResponse(message) {
			sendManagerMenu(bot, chatID)
		} else {
			sendMainMenu(bot, chatID)
		}
		if isAdminUser(message.From) || strings.EqualFold(message.From.UserName, "Shpinatyamba") {
			// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
			adminMsg := tgbotapi.NewMessage(chatID, "–î–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
			adminMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "admin_panel"),
				),
			)
			bot.Send(adminMsg)
		}
		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º/–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ ID
		notifyNewUserWithAssign(bot, message.From)
	default:
		// –°–±–æ—Ä –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
		if nameCollectState[chatID] {
			if strings.TrimSpace(strings.ToLower(message.Text)) == "/cancel" {
				delete(nameCollectState, chatID)
				msg := tgbotapi.NewMessage(chatID, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
				bot.Send(msg)
				sendMainMenu(bot, chatID)
				return
			}

			providedName := strings.TrimSpace(message.Text)
			if providedName == "" {
				bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è"))
				return
			}

			// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Ç–∏–∫–µ—Ç
			if _, exists := userTickets[chatID]; !exists {
				createTicketAndAskQuestion(bot, chatID, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
			}
			if ticketID, ok := userTickets[chatID]; ok {
				updateTicketUserInfo(ticketID, message.From.UserName, providedName, "")
			}
			delete(nameCollectState, chatID)
			bot.Send(tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É."))
			// –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞
			questionStates[chatID] = true
			return
		}
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
		if isManagerUser(message.From) {
			if handleTicketSearchInput(bot, message) || handleExportTicketIDInput(bot, message) {
				return
			}
		}
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω-–æ–ø–µ—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º
		if isAdminUser(message.From) || strings.EqualFold(message.From.UserName, "Shpinatyamba") {
			if handleAdminInput(bot, message) {
				return
			}
		}
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
		if isManagerResponse(message) {
			handleManagerResponse(bot, message)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
		if questionStates[chatID] {
			handleManagerQuestion(bot, message)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∏–∫–µ—Ç
		if messageModeStates[chatID] {
			handleClientTicketMessage(bot, message)
			return
		}

		state, exists := userStates[chatID]
		if exists {
			handleSurveyResponse(bot, message, state)
		} else {
			msg := tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
			bot.Send(msg)
		}
	}
}

func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç Osteomerch. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–¥–µ–∂–¥—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏:")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	hasActiveTicket := false
	if ticketID, exists := userTickets[chatID]; exists {
		if ticket, found := tickets[ticketID]; found && ticket.Status == "open" {
			hasActiveTicket = true
		}
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–æ–±—Ä–∞—Ç—å", "select"),
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "browse"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞ —Å–∞–π—Ç–µ", "https://osteomerch.com/katalog/"),
		),
	)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–∫–µ—Ç–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
	if hasActiveTicket {
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ç–∏–∫–µ—Ç", "back_to_ticket"),
		))
	}

	// –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "contact_manager"),
	))

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleTeeSelection(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	selectedTee := strings.TrimPrefix(callback.Data, "tee_")

	state, exists := userStates[chatID]
	if !exists {
		state = &UserState{Step: 1}
		userStates[chatID] = state
	}

	state.Step = 2
	state.SelectedTee = selectedTee

	msg := tgbotapi.NewMessage(chatID, "–í–∞—à —Ä–æ—Å—Ç? (–≤ —Å–º)")
	bot.Send(msg)
}

func handleCallbackQuery(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	log.Printf("–ü–æ–ª—É—á–µ–Ω callback: %s –¥–ª—è —á–∞—Ç–∞ %d", callback.Data, chatID)

	switch callback.Data {
	case "select":
		log.Printf("–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		startSurvey(bot, chatID)
	case "browse":
		log.Printf("–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		showCatalog(bot, chatID)
	case "back_to_menu":
		// –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–µ –º–µ–Ω—é
		log.Printf("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		if isManagerUser(callback.From) {
			sendManagerMenu(bot, chatID)
		} else {
			sendMainMenu(bot, chatID)
		}
	case "oversize_yes":
		handleOversizeCallback(bot, chatID, true)
	case "oversize_no":
		handleOversizeCallback(bot, chatID, false)
	case "manager_tickets":
		handleManagerTicketsCallback(bot, chatID)
	case "manager_open_tickets":
		handleManagerOpenTicketsCallback(bot, chatID)
	case "manager_closed_tickets":
		handleManagerClosedTicketsCallback(bot, chatID)
	case "manager_stats":
		handleManagerStatsCallback(bot, chatID)
	case "manager_help":
		handleManagerHelpCallback(bot, chatID)
	case "manager_export_menu":
		if isManagerUser(callback.From) {
			handleManagerExportMenu(bot, chatID)
		}
	case "manager_export_users":
		if isManagerUser(callback.From) {
			if buf, err := exportUsersExcel(); err == nil {
				sendExcelBuffer(bot, chatID, "users.xlsx", buf)
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"))
			}
		}
	case "manager_export_tickets":
		if isManagerUser(callback.From) {
			if buf, err := exportAllTicketsExcel(); err == nil {
				sendExcelBuffer(bot, chatID, "tickets.xlsx", buf)
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"))
			}
		}
	case "manager_export_ticket_by_id":
		if isManagerUser(callback.From) {
			exportTicketIDState[chatID] = true
			msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel (–∏–ª–∏ /cancel)")
			bot.Send(msg)
		}
	case "back_to_manager_menu":
		sendManagerMenu(bot, chatID)
	case "start_survey":
		startSurvey(bot, chatID)
	case "catalog":
		if isManagerUser(callback.From) {
			showCatalogForManager(bot, chatID)
		} else {
			showCatalog(bot, chatID)
		}
	case "help":
		if isManagerUser(callback.From) {
			handleManagerHelpCallback(bot, chatID)
		} else {
			sendMainMenu(bot, chatID)
		}
	case "admin_panel":
		if isAdminUser(callback.From) || strings.EqualFold(callback.From.UserName, "Shpinatyamba") {
			showAdminPanel(bot, chatID)
		} else {
			sendMainMenu(bot, chatID)
		}
	case "admin_list_managers":
		if isAdminUser(callback.From) || strings.EqualFold(callback.From.UserName, "Shpinatyamba") {
			showManagersList(bot, chatID)
		}
	case "admin_add_manager":
		if isAdminUser(callback.From) || strings.EqualFold(callback.From.UserName, "Shpinatyamba") {
			promptAddManager(bot, chatID)
		}
	case "admin_remove_manager":
		if isAdminUser(callback.From) || strings.EqualFold(callback.From.UserName, "Shpinatyamba") {
			promptRemoveManager(bot, chatID)
		}
	case "manager_search_ticket":
		if isManagerUser(callback.From) {
			handleManagerSearchTicket(bot, chatID)
		}
	case "contact_manager":
		log.Printf("–ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		showContactManagerMenu(bot, chatID)
	case "contact_manager_direct":
		log.Printf("–ü—Ä—è–º–∞—è —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		nameCollectState[chatID] = true
		prompt := tgbotapi.NewMessage(chatID, "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –£–∫–∞–∂–∏—Ç–µ –∏–º—è.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
		bot.Send(prompt)
	case "back_to_ticket":
		log.Printf("–í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–∏–∫–µ—Ç –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		showClientTicketInterface(bot, chatID)
	case "ticket_write_message":
		log.Printf("–†–µ–∂–∏–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		startClientMessageMode(bot, chatID)
	case "create_new_ticket":
		log.Printf("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		createNewClientTicket(bot, chatID)
	case "admin_assign_manager_id_" + "":
		// dummy to keep formatter happy
	default:
		if strings.HasPrefix(callback.Data, "tee_") {
			log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —á–∞—Ç–∞ %d", chatID)
			handleTeeSelection(bot, callback)
		} else if strings.HasPrefix(callback.Data, "ticket_") {
			handleTicketButtonCallback(bot, chatID, callback.Data)
		} else if strings.HasPrefix(callback.Data, "client_ticket_dialog_") {
			ticketIDStr := strings.TrimPrefix(callback.Data, "client_ticket_dialog_")
			ticketID, err := strconv.Atoi(ticketIDStr)
			if err != nil {
				msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ ID —Ç–∏–∫–µ—Ç–∞")
				bot.Send(msg)
				return
			}
			showClientTicketDialog(bot, chatID, ticketID)
		} else if strings.HasPrefix(callback.Data, "admin_assign_manager_id_") {
			if isAdminUser(callback.From) || strings.EqualFold(callback.From.UserName, "Shpinatyamba") {
				idStr := strings.TrimPrefix(callback.Data, "admin_assign_manager_id_")
				if uid, err := strconv.ParseInt(idStr, 10, 64); err == nil {
					addManagerByID(uid)
					// —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
					bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º (ID %d)", uid)))
					bot.Send(tgbotapi.NewMessage(uid, "‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"))
				} else {
					bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID"))
				}
			}
		}
	}

	bot.Request(tgbotapi.NewCallback(callback.ID, ""))
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–¥–µ–∂–¥—ã
// calculateSize –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ getSizeInfo)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞ –æ —Ç–æ–≤–∞—Ä–∞—Ö
func startSurvey(bot *tgbotapi.BotAPI, chatID int64) {
	log.Printf("–ù–∞—á–∏–Ω–∞—é –æ–ø—Ä–æ—Å –¥–ª—è —á–∞—Ç–∞ %d", chatID)
	userStates[chatID] = &UserState{Step: 1}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –º–µ—Ä—á:")
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	for i, product := range products {
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–í—ã–±—Ä–∞—Ç—å", fmt.Sprintf("tee_%d", i)),
			),
		)

		// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(product.ImageURL))
		photo.Caption = fmt.Sprintf("%s\n\n–†–∞–∑–º–µ—Ä—ã: %s", product.Name, strings.Join(product.Sizes, ", "))
		photo.ReplyMarkup = keyboard

		if _, err := bot.Send(photo); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è %s: %v, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", product.Name, err)

			// –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			textMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("%s\n\n–†–∞–∑–º–µ—Ä—ã: %s", product.Name, strings.Join(product.Sizes, ", ")))
			textMsg.ReplyMarkup = keyboard
			if _, textErr := bot.Send(textMsg); textErr != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", textErr)
			}
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –æ–ø—Ä–æ—Å–µ
func handleSurveyResponse(bot *tgbotapi.BotAPI, message *tgbotapi.Message, state *UserState) {
	chatID := message.Chat.ID

	switch state.Step {
	case 2:
		height, err := strconv.Atoi(message.Text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175)")
			bot.Send(msg)
			return
		}

		if height < 100 || height > 250 {
			msg := tgbotapi.NewMessage(chatID, "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
			bot.Send(msg)
			return
		}

		state.Height = height
		state.Step = 3
		msg := tgbotapi.NewMessage(chatID, "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏? (–≤ —Å–º)")
		bot.Send(msg)

	case 3:
		chestSize, err := strconv.Atoi(message.Text)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90)")
			bot.Send(msg)
			return
		}

		if chestSize < 70 || chestSize > 130 {
			msg := tgbotapi.NewMessage(chatID, "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 70 –¥–æ 130 —Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
			bot.Send(msg)
			return
		}

		state.ChestSize = chestSize
		// –û–≤–µ—Ä—Å–∞–π–∑ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ–ª–∏ "–ö—Ä—ã–ª–∞—Ç—ã–µ –§—Ä–∞–∑—ã" (–∏–Ω–¥–µ–∫—Å 0)
		selectedIdx, _ := strconv.Atoi(state.SelectedTee)
		if selectedIdx == 0 { // —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–≤–µ—Ä—Å–∞–π–∑
			state.Step = 4
			askOversizeQuestion(bot, chatID)
			return
		}
		// –î–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –æ–≤–µ—Ä—Å–∞–π–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ false –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
		state.Oversize = false
		showRecommendations(bot, chatID, state)
		delete(userStates, chatID)
		return

	case 4:
		response := strings.ToLower(message.Text)
		switch response {
		case "–¥–∞", "yes":
			state.Oversize = true
		case "–Ω–µ—Ç", "no":
			state.Oversize = false
		default:
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
			bot.Send(msg)
			return
		}
		showRecommendations(bot, chatID, state)
		delete(userStates, chatID)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ–± –æ–≤–µ—Ä—Å–∞–π–∑–µ
func askOversizeQuestion(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ–≤–µ—Ä—Å–∞–π–∑ –º–æ–¥–µ–ª—å?")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–∞", "oversize_yes"),
			tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", "oversize_no"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –æ–≤–µ—Ä—Å–∞–π–∑–µ
func handleOversizeCallback(bot *tgbotapi.BotAPI, chatID int64, oversize bool) {
	state, exists := userStates[chatID]
	if !exists {
		return
	}

	state.Oversize = oversize
	showRecommendations(bot, chatID, state)
	delete(userStates, chatID)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ä–∞–∑–º–µ—Ä–∞
func showRecommendations(bot *tgbotapi.BotAPI, chatID int64, state *UserState) {
	log.Printf("–ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞ %d, —Ç–æ–≤–∞—Ä: %s", chatID, state.SelectedTee)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SelectedTee –Ω–µ –ø—É—Å—Ç–æ–π
	if state.SelectedTee == "" {
		log.Printf("–û—à–∏–±–∫–∞: SelectedTee –ø—É—Å—Ç–æ–π –¥–ª—è —á–∞—Ç–∞ %d", chatID)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		bot.Send(msg)
		return
	}

	teeIndex, err := strconv.Atoi(state.SelectedTee)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–µ–∫—Å–∞ —Ç–æ–≤–∞—Ä–∞: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		bot.Send(msg)
		return
	}

	if teeIndex < 0 || teeIndex >= len(products) {
		log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞: %d, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: %d", teeIndex, len(products))
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		bot.Send(msg)
		return
	}

	product := products[teeIndex]

	// –û–≤–µ—Ä—Å–∞–π–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ–ª–∏ "–ö—Ä—ã–ª–∞—Ç—ã–µ –§—Ä–∞–∑—ã" (–∏–Ω–¥–µ–∫—Å 0)
	selectedIdx, _ := strconv.Atoi(state.SelectedTee)
	oversize := state.Oversize && selectedIdx == 0
	mark, ru := getSizeInfo(state.ChestSize, oversize)

	heightInfo := ""
	if state.Height > 0 {
		var hRange string
		if state.Height >= 158 && state.Height <= 175 {
			hRange = "158-175"
		} else if state.Height >= 176 && state.Height <= 188 {
			hRange = "176-188"
		}
		if hRange != "" {
			heightInfo = fmt.Sprintf("\n–†–æ—Å—Ç: %s —Å–º", hRange)
		}
	}

	responseText := fmt.Sprintf("–í–∞–º –ø–æ–¥–æ–π–¥—É—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏:\n\n%s\n–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞: %s\n–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä: %s%s",
		product.Name, mark, ru, heightInfo)

	msg := tgbotapi.NewMessage(chatID, responseText)

	// –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–æ–±—Ä–∞—Ç—å –µ—â–µ", "select"),
			tgbotapi.NewInlineKeyboardButtonData("–ö–∞—Ç–∞–ª–æ–≥", "browse"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ö—É–ø–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", product.Link),
			tgbotapi.NewInlineKeyboardButtonURL("–í–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥", "https://osteomerch.com/katalog/"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "contact_manager"),
		),
	)

	msg.ReplyMarkup = keyboard
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: %v", err)
	}

	// –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
	if ticketID, exists := userTickets[chatID]; exists {
		if t, ok := tickets[ticketID]; ok {
			t.Height = state.Height
			t.ChestSize = state.ChestSize
			t.Oversize = oversize
			mark, _ := getSizeInfo(state.ChestSize, oversize)
			t.RecommendedSize = mark
			t.LastMessage = time.Now()
			saveTickets()
		}
	}
}

// getSizeInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ —Ç–∞–±–ª–∏—Ü–µ, —É—á–∏—Ç—ã–≤–∞—è –æ–≤–µ—Ä—Å–∞–π–∑
func getSizeInfo(chestSize int, oversize bool) (string, string) {
	type row struct{ mark, ru string }
	table := []struct {
		min  int
		max  int
		size row
	}{
		{82, 89, row{"XS-S", "42-44"}},
		{90, 97, row{"M-L", "46-48"}},
		{98, 105, row{"XL-2XL", "50-52"}},
		{106, 113, row{"3XL-4XL", "54-56"}},
		{114, 121, row{"5XL-6XL", "58-60"}},
	}
	idx := -1
	for i, r := range table {
		if chestSize >= r.min && chestSize <= r.max {
			idx = i
			break
		}
	}
	if idx == -1 {
		if chestSize < table[0].min {
			idx = 0
		} else if chestSize > table[len(table)-1].max {
			idx = len(table) - 1
		}
	}
	if oversize && idx < len(table)-1 {
		idx++
	}
	return table[idx].size.mark, table[idx].size.ru
}

// isWithinBusinessHours –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ 09:00-20:00
func isWithinBusinessHours() bool {
	now := time.Now()
	h := now.Hour()
	return h >= 9 && h < 20
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
func showCatalog(bot *tgbotapi.BotAPI, chatID int64) {
	log.Printf("–ü–æ–∫–∞–∑—ã–≤–∞—é –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —á–∞—Ç–∞ %d", chatID)

	msg := tgbotapi.NewMessage(chatID, "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:")
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: %v", err)
		return
	}

	for _, product := range products {
		// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(product.ImageURL))
		photo.Caption = fmt.Sprintf("%s\n–†–∞–∑–º–µ—Ä—ã: %s\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç: [%s](%s)",
			product.Name, strings.Join(product.Sizes, ", "), product.Name, product.Link)
		photo.ParseMode = "MarkdownV2"

		if _, err := bot.Send(photo); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è %s: %v, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", product.Name, err)

			// –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			textMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("%s\n–†–∞–∑–º–µ—Ä—ã: %s\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç: [%s](%s)",
				product.Name, strings.Join(product.Sizes, ", "), product.Name, product.Link))
			textMsg.ParseMode = "MarkdownV2"
			if _, textErr := bot.Send(textMsg); textErr != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: %v", textErr)
			}
		}
	}

	// –ú–µ–Ω—é –ø–æ—Å–ª–µ –∫–∞—Ç–∞–ª–æ–≥–∞: –ø–æ–¥–±–æ—Ä –∏ —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥–æ–±—Ä–∞—Ç—å", "select"),
			tgbotapi.NewInlineKeyboardButtonData("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "contact_manager"),
		),
	)

	finalMsg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	finalMsg.ReplyMarkup = keyboard
	if _, err := bot.Send(finalMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: %v", err)
	}
}

// showCatalogForManager ‚Äî –≤–µ—Ä—Å–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –±–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö CTA
func showCatalogForManager(bot *tgbotapi.BotAPI, chatID int64) {
	log.Printf("–ü–æ–∫–∞–∑—ã–≤–∞—é –∫–∞—Ç–∞–ª–æ–≥ (–º–µ–Ω–µ–¥–∂–µ—Ä) –¥–ª—è —á–∞—Ç–∞ %d", chatID)

	msg := tgbotapi.NewMessage(chatID, "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:")
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: %v", err)
		return
	}

	for _, product := range products {
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(product.ImageURL))
		photo.Caption = fmt.Sprintf("%s\n–†–∞–∑–º–µ—Ä—ã: %s\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç: [%s](%s)",
			product.Name, strings.Join(product.Sizes, ", "), product.Name, product.Link)
		photo.ParseMode = "MarkdownV2"
		if _, err := bot.Send(photo); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è %s: %v, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", product.Name, err)
			textMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("%s\n–†–∞–∑–º–µ—Ä—ã: %s\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç: [%s](%s)",
				product.Name, strings.Join(product.Sizes, ", "), product.Name, product.Link))
			textMsg.ParseMode = "MarkdownV2"
			if _, textErr := bot.Send(textMsg); textErr != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: %v", textErr)
			}
		}
	}

	// –¢–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
		),
	)
	finalMsg := tgbotapi.NewMessage(chatID, "–ì–æ—Ç–æ–≤–æ. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
	finalMsg.ReplyMarkup = keyboard
	if _, err := bot.Send(finalMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ (–º–µ–Ω–µ–¥–∂–µ—Ä): %v", err)
	}
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Ç–∏–∫–µ—Ç–∞

// showClientTicketInterface –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
func showClientTicketInterface(bot *tgbotapi.BotAPI, chatID int64) {
	// –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	ticketID, exists := userTickets[chatID]
	if !exists {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞")
		bot.Send(msg)
		return
	}

	ticket, found := tickets[ticketID]
	if !found {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		delete(userTickets, chatID)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
	lastMessages := getLastMessages(ticketID, 5)

	var text string
	if len(lastMessages) > 0 {
		text = fmt.Sprintf("üé´ –í–∞—à —Ç–∏–∫–µ—Ç #%d (%s)\n\n", ticket.ID, getStatusText(ticket.Status))
		text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
		for _, msg := range lastMessages {
			senderType := "üë§ –í—ã"
			if msg.IsFromManager {
				senderType = "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä"
			}
			text += fmt.Sprintf("%s (%s):\n%s\n\n",
				senderType,
				msg.Time.Format("02.01 15:04"),
				msg.Text)
		}
	} else {
		text = fmt.Sprintf("üé´ –í–∞—à —Ç–∏–∫–µ—Ç #%d (%s)\n\n–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç", ticket.ID, getStatusText(ticket.Status))
	}

	msg := tgbotapi.NewMessage(chatID, text)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup()

	// –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", "ticket_write_message"),
		tgbotapi.NewInlineKeyboardButtonData("üìã –î–∏–∞–ª–æ–≥", fmt.Sprintf("client_ticket_dialog_%d", ticketID)),
	})

	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "back_to_menu"),
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç", "create_new_ticket"),
	})

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// getLastMessages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–∏–∫–µ—Ç–∞
func getLastMessages(ticketID int, count int) []Message {
	ticket, exists := tickets[ticketID]
	if !exists || len(ticket.Messages) == 0 {
		return []Message{}
	}

	messages := ticket.Messages
	start := len(messages) - count
	if start < 0 {
		start = 0
	}

	return messages[start:]
}

// getStatusText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞
func getStatusText(status string) string {
	switch status {
	case "open":
		return "üü¢ –û—Ç–∫—Ä—ã—Ç"
	case "closed":
		return "üî¥ –ó–∞–∫—Ä—ã—Ç"
	default:
		return status
	}
}

// showClientTicketDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
func showClientTicketDialog(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	ticket, exists := tickets[ticketID]
	if !exists {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	if len(ticket.Messages) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üìã –î–∏–∞–ª–æ–≥ –ø—É—Å—Ç")
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥
	dialogText := getTicketMessages(ticketID)

	// –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
	const maxMessageLength = 4000
	if len(dialogText) > maxMessageLength {
		parts := splitMessage(dialogText, maxMessageLength)
		for i, part := range parts {
			msg := tgbotapi.NewMessage(chatID, part)
			if i == len(parts)-1 {
				// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
				keyboard := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üîô –ö —Ç–∏–∫–µ—Ç—É", "back_to_ticket"),
					),
				)
				msg.ReplyMarkup = keyboard
			}
			bot.Send(msg)
		}
	} else {
		msg := tgbotapi.NewMessage(chatID, dialogText)
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ö —Ç–∏–∫–µ—Ç—É", "back_to_ticket"),
			),
		)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	}
}

// splitMessage —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
func splitMessage(text string, maxLength int) []string {
	var parts []string
	runes := []rune(text)

	for len(runes) > 0 {
		if len(runes) <= maxLength {
			parts = append(parts, string(runes))
			break
		}

		cutIndex := maxLength
		for cutIndex > maxLength/2 && runes[cutIndex] != '\n' {
			cutIndex--
		}

		if cutIndex <= maxLength/2 {
			cutIndex = maxLength
		}

		parts = append(parts, string(runes[:cutIndex]))
		runes = runes[cutIndex:]
	}

	return parts
}

// startClientMessageMode –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
func startClientMessageMode(bot *tgbotapi.BotAPI, chatID int64) {
	messageModeStates[chatID] = true

	msg := tgbotapi.NewMessage(chatID, "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "back_to_ticket"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// handleClientTicketMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–∏–∫–µ—Ç
func handleClientTicketMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID

	if message.Text == "/cancel" {
		messageModeStates[chatID] = false
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –†–µ–∂–∏–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω")
		bot.Send(msg)
		showClientTicketInterface(bot, chatID)
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	ticketID, exists := userTickets[chatID]
	if !exists {
		messageModeStates[chatID] = false
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	ticket, found := tickets[ticketID]
	if !found || ticket.Status != "open" {
		messageModeStates[chatID] = false
		msg := tgbotapi.NewMessage(chatID, "‚ùå –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		bot.Send(msg)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–∏–∫–µ—Ç
	addMessageToTicket(ticketID, chatID, message.Text, false)

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∏–∫–µ—Ç–µ
	updateTicketUserInfo(ticketID, message.From.UserName, message.From.FirstName, message.From.LastName)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
	messageText := fmt.Sprintf("üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–∏–∫–µ—Ç #%d):\n\n%s", ticketID, message.Text)

	// –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
	ids := getManagerIDs()
	if len(ids) == 0 {
		messageModeStates[chatID] = false
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ç–∏–∫–µ—Ç–µ!\n\n‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
		bot.Send(msg)
		showClientTicketInterface(bot, chatID)
		return
	}
	for _, mid := range ids {
		msg := tgbotapi.NewMessage(mid, messageText)
		bot.Send(msg)
	}

	// –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
	messageModeStates[chatID] = false

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
	confirmText := "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É!"
	if !isWithinBusinessHours() {
		confirmText += "\n\n‚è∞ –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å 09:00 –¥–æ 20:00. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è."
	}
	confirmMsg := tgbotapi.NewMessage(chatID, confirmText)
	bot.Send(confirmMsg)

	log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %d –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∏–∫–µ—Ç #%d", chatID, ticketID)

	showClientTicketInterface(bot, chatID)
}

// createNewClientTicket —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
func createNewClientTicket(bot *tgbotapi.BotAPI, chatID int64) {
	// –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–∫–µ—Ç –∏–∑ userTickets
	if ticketID, exists := userTickets[chatID]; exists {
		if ticket, found := tickets[ticketID]; found {
			ticket.Status = "closed"
			saveTickets()
			log.Printf("–ó–∞–∫—Ä—ã—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∏–∫–µ—Ç #%d –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", ticketID, chatID)
		}
	}
	delete(userTickets, chatID)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
	now := time.Now()
	ticket := &Ticket{
		ID:          nextTicketID,
		UserID:      chatID,
		Username:    "",
		FirstName:   "",
		LastName:    "",
		Height:      0,
		ChestSize:   0,
		Oversize:    false,
		Status:      "open",
		CreatedAt:   now,
		LastMessage: now,
		Messages:    []Message{},
	}

	tickets[nextTicketID] = ticket
	userTickets[chatID] = nextTicketID
	nextTicketID++

	saveTickets()

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç #%d!\n\nüí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", ticket.ID))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", "ticket_write_message"),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–∞—è", "back_to_menu"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)

	log.Printf("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç #%d –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", ticket.ID, chatID)
}
