package main

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func sendManagerMenu(bot *tgbotapi.BotAPI, chatID int64) {
	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–∫–µ—Ç–æ–≤
	openTickets := 0
	closedTickets := 0
	for _, ticket := range tickets {
		if ticket.Status == "open" {
			openTickets++
		} else {
			closedTickets++
		}
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ–Ω–µ–¥–∂–µ—Ä!\n\nüìä –¢–∏–∫–µ—Ç—ã: üü¢ %d –æ—Ç–∫—Ä—ã—Ç—ã—Ö | üî¥ %d –∑–∞–∫—Ä—ã—Ç—ã—Ö\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", openTickets, closedTickets))

    keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìö –ö–∞—Ç–∞–ª–æ–≥", "catalog"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –ö–ª–∏–µ–Ω—Ç—ã", "manager_tickets"),
		),
        tgbotapi.NewInlineKeyboardRow(
            tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "manager_export_menu"),
        ),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help"),
		),
	)

	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleManagerTicketsCallback(bot *tgbotapi.BotAPI, chatID int64) {
	showTicketsWithFilters(bot, chatID)
}

func handleManagerOpenTicketsCallback(bot *tgbotapi.BotAPI, chatID int64) {
	showTicketsWithFilters(bot, chatID, "open")
}

func handleManagerClosedTicketsCallback(bot *tgbotapi.BotAPI, chatID int64) {
	showTicketsWithFilters(bot, chatID, "closed")
}

func handleManagerStatsCallback(bot *tgbotapi.BotAPI, chatID int64) {
	totalTickets := len(tickets)
	openTickets := 0
	closedTickets := 0

	for _, ticket := range tickets {
		if ticket.Status == "open" {
			openTickets++
		} else {
			closedTickets++
		}
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤:\n\n"+
		"üìà –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: %d\n"+
		"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: %d\n"+
		"üî¥ –ó–∞–∫—Ä—ã—Ç—ã—Ö: %d\n"+
		"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: %d",
		totalTickets, openTickets, closedTickets, nextTicketID-1))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleManagerHelpCallback(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "‚ùì –ü–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n\n"+
		"üîò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n"+
		"‚Ä¢ –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ç—ã\n"+
		"‚Ä¢ –ù–æ–≤—ã–µ —Ç–∏–∫–µ—Ç—ã - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö\n"+
		"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"+
		"‚Ä¢ –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"+
		"üí° –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// –ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
func handleManagerExportMenu(bot *tgbotapi.BotAPI, chatID int64) {
    msg := tgbotapi.NewMessage(chatID, "üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel:\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å:")
    keyboard := tgbotapi.NewInlineKeyboardMarkup(
        tgbotapi.NewInlineKeyboardRow(
            tgbotapi.NewInlineKeyboardButtonData("1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "manager_export_users"),
        ),
        tgbotapi.NewInlineKeyboardRow(
            tgbotapi.NewInlineKeyboardButtonData("2) –í—Å–µ —Ç–∏–∫–µ—Ç—ã", "manager_export_tickets"),
        ),
        tgbotapi.NewInlineKeyboardRow(
            tgbotapi.NewInlineKeyboardButtonData("3) –¢–∏–∫–µ—Ç –ø–æ ID", "manager_export_ticket_by_id"),
        ),
        tgbotapi.NewInlineKeyboardRow(
            tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
        ),
    )
    msg.ReplyMarkup = keyboard
    bot.Send(msg)
}

var exportTicketIDState = make(map[int64]bool) // chatID -> –∂–¥–µ–º ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞

func isManagerResponse(message *tgbotapi.Message) bool {
	return isManagerUser(message.From)
}

func handleManagerResponse(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	text := message.Text

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
	if ticketID, exists := userTickets[message.Chat.ID]; exists {
		handleManagerReplyToTicket(bot, message, ticketID)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
	switch {
	case strings.HasPrefix(text, "–û—Ç–≤–µ—Ç:"):
		handleOldReplyFormat(bot, message)
	default:
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
		sendManagerMenu(bot, message.Chat.ID)
	}
}

func handleOldReplyFormat(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	// –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	parts := strings.SplitN(message.Text, " ", 3)
	if len(parts) >= 3 {
		userID, err := strconv.ParseInt(parts[1], 10, 64)
		if err != nil {
			msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –û—Ç–≤–µ—Ç: [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [—Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞]")
			bot.Send(msg)
			return
		}

		answerText := parts[2]
		responseMsg := tgbotapi.NewMessage(userID, fmt.Sprintf("üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n%s", answerText))
		bot.Send(responseMsg)

		confirmMsg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userID))
		bot.Send(confirmMsg)

		log.Printf("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s", userID, answerText)
	} else {
		msg := tgbotapi.NewMessage(message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –û—Ç–≤–µ—Ç: [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [—Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞]")
		bot.Send(msg)
	}
}

// ===== –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å =====

var adminActionState = make(map[int64]string) // chatID -> "add_manager" | "remove_manager"
var searchState = make(map[int64]bool)        // chatID -> true –µ—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–∞

func showAdminPanel(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë• –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", "admin_list_managers"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", "admin_add_manager"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûñ –°–Ω—è—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", "admin_remove_manager"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_menu"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func showManagersList(bot *tgbotapi.BotAPI, chatID int64) {
	ids := getManagerIDs()
	if len(ids) == 0 && len(managerUsernamesSet) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã"))
		return
	}
	var b strings.Builder
	b.WriteString("–¢–µ–∫—É—â–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:\n")
	for _, id := range ids {
		b.WriteString(fmt.Sprintf("‚Ä¢ ID: %d\n", id))
	}
	for u := range managerUsernamesSet {
		b.WriteString(fmt.Sprintf("‚Ä¢ @%s (–ø–æ username)\n", u))
	}
	bot.Send(tgbotapi.NewMessage(chatID, b.String()))
}

func promptAddManager(bot *tgbotapi.BotAPI, chatID int64) {
	adminActionState[chatID] = "add_manager"
	bot.Send(tgbotapi.NewMessage(chatID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n‚Ä¢ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n‚Ä¢ –∏–ª–∏ –µ–≥–æ —á–∏—Å–ª–æ–≤–æ–π ID\n‚Ä¢ –∏–ª–∏ @username"))
}

func promptRemoveManager(bot *tgbotapi.BotAPI, chatID int64) {
	adminActionState[chatID] = "remove_manager"
	bot.Send(tgbotapi.NewMessage(chatID, "–ö–æ–≥–æ —Å–Ω—è—Ç—å? –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥, —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username"))
}

func handleAdminInput(bot *tgbotapi.BotAPI, message *tgbotapi.Message) bool {
	chatID := message.Chat.ID
	action, has := adminActionState[chatID]
	if !has {
		return false
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–æ—Ä–≤–∞—Ä–¥–∞
	var targetID int64
	var targetUsername string
	if message.ForwardFrom != nil {
		targetID = message.ForwardFrom.ID
		targetUsername = message.ForwardFrom.UserName
	} else {
		text := strings.TrimSpace(message.Text)
		if strings.HasPrefix(text, "@") {
			targetUsername = strings.TrimPrefix(text, "@")
		} else if id, err := strconv.ParseInt(text, 10, 64); err == nil {
			targetID = id
		} else {
			bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥, ID –∏–ª–∏ @username"))
			return true
		}
	}

	switch action {
	case "add_manager":
		if targetID != 0 {
			addManagerByID(targetID)
		}
		if targetUsername != "" {
			managerUsernamesSet[strings.ToLower(targetUsername)] = true
			saveManagersToFile()
		}
		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: %s%v",
			usernameFmt(targetUsername), idFmt(targetID))))
		if targetID != 0 {
			bot.Send(tgbotapi.NewMessage(targetID, "‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"))
		}
	case "remove_manager":
		changed := false
		if targetID != 0 {
			if managerIDsSet[targetID] {
				removeManagerByID(targetID)
				changed = true
			}
		}
		if targetUsername != "" {
			lu := strings.ToLower(targetUsername)
			if managerUsernamesSet[lu] {
				delete(managerUsernamesSet, lu)
				saveManagersToFile()
				changed = true
			}
		}
		if changed {
			bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –°–Ω—è—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: %s%v",
				usernameFmt(targetUsername), idFmt(targetID))))
			if targetID != 0 {
				bot.Send(tgbotapi.NewMessage(targetID, "‚ö†Ô∏è –í—ã –±–æ–ª—å—à–µ –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä"))
			}
		} else {
			bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"))
		}
	}

	delete(adminActionState, chatID)
	return true
}

func usernameFmt(u string) string {
	if u == "" {
		return ""
	}
	return "@" + u + " "
}

func idFmt(id int64) string {
	if id == 0 {
		return ""
	}
	return fmt.Sprintf("(ID %d)", id)
}

// showTicketsWithFilters –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º
func showTicketsWithFilters(bot *tgbotapi.BotAPI, chatID int64, statusFilter ...string) {
	var filteredTickets []*Ticket
	var title string

	// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
	if len(statusFilter) > 0 && statusFilter[0] != "" {
		for _, ticket := range tickets {
			if ticket.Status == statusFilter[0] {
				filteredTickets = append(filteredTickets, ticket)
			}
		}
		switch statusFilter[0] {
		case "open":
			title = "üÜï –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã"
		case "closed":
			title = "üî¥ –ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã"
		default:
			title = "üé´ –¢–∏–∫–µ—Ç—ã"
		}
	} else {
		for _, ticket := range tickets {
			filteredTickets = append(filteredTickets, ticket)
		}
		title = "üé´ –í—Å–µ —Ç–∏–∫–µ—Ç—ã"
	}

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ID (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
	for i := 0; i < len(filteredTickets)-1; i++ {
		for j := i + 1; j < len(filteredTickets); j++ {
			if filteredTickets[i].ID < filteredTickets[j].ID {
				filteredTickets[i], filteredTickets[j] = filteredTickets[j], filteredTickets[i]
			}
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	var text strings.Builder
	text.WriteString(fmt.Sprintf("%s (%d):\n\n", title, len(filteredTickets)))

	if len(filteredTickets) == 0 {
		text.WriteString("üì≠ –ù–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤")
	} else {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–∏–∫–µ—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
		limit := 10
		if len(filteredTickets) < limit {
			limit = len(filteredTickets)
		}

		for i := 0; i < limit; i++ {
			ticket := filteredTickets[i]
			status := "üü¢"
			if ticket.Status == "closed" {
				status = "üî¥"
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			name := strings.TrimSpace(ticket.FirstName + " " + ticket.LastName)
			if name == "" {
				name = "–ë–µ–∑ –∏–º–µ–Ω–∏"
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º username
			username := ""
			if ticket.Username != "" {
				username = fmt.Sprintf(" (@%s)", ticket.Username)
			}

			// –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
			timeStr := ticket.CreatedAt.Format("02.01 15:04")

			// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
			msgCount := len(ticket.Messages)
			msgInfo := ""
			if msgCount > 0 {
				msgInfo = fmt.Sprintf(" | üí¨ %d", msgCount)
			}

			text.WriteString(fmt.Sprintf("%s #%d %s%s\nüÜî %d | %s%s\n\n",
				status, ticket.ID, name, username, ticket.UserID, timeStr, msgInfo))
		}

		if len(filteredTickets) > 10 {
			text.WriteString(fmt.Sprintf("... –∏ –µ—â–µ %d —Ç–∏–∫–µ—Ç–æ–≤", len(filteredTickets)-10))
		}
	}

	msg := tgbotapi.NewMessage(chatID, text.String())

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üé´ –í—Å–µ", "manager_tickets"),
		tgbotapi.NewInlineKeyboardButtonData("üÜï –û—Ç–∫—Ä—ã—Ç—ã–µ", "manager_open_tickets"),
		tgbotapi.NewInlineKeyboardButtonData("üî¥ –ó–∞–∫—Ä—ã—Ç—ã–µ", "manager_closed_tickets"),
	})

	// –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É", "manager_search_ticket"),
	})

	// –ö–Ω–æ–ø–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5 –≤ —Ä—è–¥)
	buttonLimit := 10
	if len(filteredTickets) < buttonLimit {
		buttonLimit = len(filteredTickets)
	}
	for i := 0; i < buttonLimit && i < len(filteredTickets); i++ {
		ticketID := filteredTickets[i].ID
		ticket := filteredTickets[i]

		buttonText := fmt.Sprintf("#%d", ticketID)
		if len(ticket.FirstName) > 0 {
			shortName := ticket.FirstName
			if len(shortName) > 8 {
				shortName = shortName[:8] + "..."
			}
			buttonText = fmt.Sprintf("#%d %s", ticketID, shortName)
		}

		button := tgbotapi.NewInlineKeyboardButtonData(buttonText, fmt.Sprintf("ticket_view_%d", ticketID))

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥
		if len(keyboard) == 0 || len(keyboard[len(keyboard)-1]) >= 2 {
			keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
		} else {
			keyboard[len(keyboard)-1] = append(keyboard[len(keyboard)-1], button)
		}
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_manager_menu"),
	})

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	bot.Send(msg)
}

// handleManagerSearchTicket –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ —Ç–∏–∫–µ—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É
func handleManagerSearchTicket(bot *tgbotapi.BotAPI, chatID int64) {
	searchState[chatID] = true
	msg := tgbotapi.NewMessage(chatID, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "manager_tickets"),
		),
	)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// handleTicketSearchInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
func handleTicketSearchInput(bot *tgbotapi.BotAPI, message *tgbotapi.Message) bool {
	chatID := message.Chat.ID
	if !searchState[chatID] {
		return false
	}

	if message.Text == "/cancel" {
		delete(searchState, chatID)
		showTicketsWithFilters(bot, chatID)
		return true
	}

	// –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞
	ticketID, err := strconv.Atoi(strings.TrimSpace(message.Text))
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞ –∏–ª–∏ /cancel"))
		return true
	}

	// –ò—â–µ–º —Ç–∏–∫–µ—Ç
	_, exists := tickets[ticketID]
	if !exists {
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –¢–∏–∫–µ—Ç #%d –Ω–µ –Ω–∞–π–¥–µ–Ω", ticketID)))
		delete(searchState, chatID)
		return true
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç
	delete(searchState, chatID)
	showTicketDetails(bot, chatID, ticketID)
	return true
}

// handleExportTicketIDInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID —Ç–∏–∫–µ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
func handleExportTicketIDInput(bot *tgbotapi.BotAPI, message *tgbotapi.Message) bool {
    chatID := message.Chat.ID
    if !exportTicketIDState[chatID] {
        return false
    }
    if message.Text == "/cancel" {
        delete(exportTicketIDState, chatID)
        handleManagerExportMenu(bot, chatID)
        return true
    }
    id, err := strconv.Atoi(strings.TrimSpace(message.Text))
    if err != nil {
        bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Ç–∏–∫–µ—Ç–∞ –∏–ª–∏ /cancel"))
        return true
    }
    if _, ok := tickets[id]; !ok {
        bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –¢–∏–∫–µ—Ç #%d –Ω–µ –Ω–∞–π–¥–µ–Ω", id)))
        delete(exportTicketIDState, chatID)
        return true
    }
    if buf, err := exportSingleTicketExcel(id); err == nil {
        sendExcelBuffer(bot, chatID, fmt.Sprintf("ticket_%d.xlsx", id), buf)
    } else {
        bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"))
    }
    delete(exportTicketIDState, chatID)
    return true
}

// notifyNewUserWithAssign –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
func notifyNewUserWithAssign(bot *tgbotapi.BotAPI, user *tgbotapi.User) {
	if user == nil {
		return
	}

	name := strings.TrimSpace(strings.TrimSpace(user.FirstName + " " + user.LastName))
	if name == "" {
		name = "(–±–µ–∑ –∏–º–µ–Ω–∏)"
	}
	uname := user.UserName
	if uname == "" {
		uname = "‚Äî"
	} else {
		uname = "@" + uname
	}

	text := fmt.Sprintf("üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É\n–ò–º—è: %s\nUsername: %s\nID: %d", name, uname, user.ID)

	label := "‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
	if user.UserName != "" {
		label = fmt.Sprintf("‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å %s –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "@"+user.UserName)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				label,
				fmt.Sprintf("admin_assign_manager_id_%d", user.ID),
			),
		),
	)

	for _, aid := range getAdminIDs() {
		if aid == 0 {
			continue
		}
		msg := tgbotapi.NewMessage(aid, text)
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	}
}
